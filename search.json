[
    { 
        "index": "Introduction",
        "title": "Introduction",
        "sub_title": "Introduction",
        "page": "Introduction",
        "heading": "Introduction",
        "description": "This section helps you get started with Space Cloud. If you are new to Space Cloud, we strongly recommend following our step-by-step guide to get started Read more about all the features Space Cloud has to offer. Explore the architecture of a typical Space Cloud Application. (Coming soon) Setting up clients in your frontend.",
        "url": "https://docs.spaceuptech.com/introduction/" 
    },
    { 
        "index": "Introduction",
        "title": "Motivation",
        "sub_title": "Motivation",
        "page": "Motivation",
        "heading": "Motivation",
        "description": "Making enterprise-scale apps at the speed of prototyping is still a distant dream for many of us. Many brilliant ideas never see the day of light because their implementation comes at the cost of time or money. Starting an app from scratch is very time-consuming. Securing and scaling your app is a different ball game altogether. Even a simple chat app becomes complicated at scale. Well, there are some excellent tools out there which help simplify app development like Google Firebase, Meteor, etc. But these tools come with their own set of problems:",
        "url": "https://docs.spaceuptech.com/introduction/motivation/" 
    },
    { 
        "index": "Introduction",
        "title": "Motivation",
        "sub_title": "Motivation",
        "page": "Motivation",
        "heading": "Vendor lock-ins",
        "description": "These tools either force you to use their own cloud (e.g., Firebase - Google Cloud) or their proprietary stack. Such tools become expensive at scale, and it is difficult to migrate later.",
        "url": "https://docs.spaceuptech.com/introduction/motivation/#vendor-lock-ins" 
    },
    { 
        "index": "Introduction",
        "title": "Motivation",
        "sub_title": "Motivation",
        "page": "Motivation",
        "heading": "Flexibility",
        "description": "Most of the RAD tools that are open source, however, only work with a particular database (e.g., Meteor - MongoDB). The next-gen apps, on the other hand, always require multiple task-specific databases.",
        "url": "https://docs.spaceuptech.com/introduction/motivation/#flexibility" 
    },
    { 
        "index": "Introduction",
        "title": "Motivation",
        "sub_title": "Motivation",
        "page": "Motivation",
        "heading": "Completeness",
        "description": "Some open-source tools are good at one particular thing (e.g., Prisma - Database layer). However, they only solve one particular problem well, which means that you still have to code for the remaining problems and also integrate bunch of other tools.",
        "url": "https://docs.spaceuptech.com/introduction/motivation/#completeness" 
    },
    { 
        "index": "Introduction",
        "title": "Motivation",
        "sub_title": "Motivation",
        "page": "Motivation",
        "heading": "Our motivation",
        "description": "We believe that if you have got an idea, then you should be able to space it up! Your ideas should hit the market soon. However, agility should not come at the cost of flexibility. You should always be in complete control. Technology should adapt to your needs and not the other way around. You should be able to choose any database, cloud vendor or technology of your preference. Space Cloud was born to solve precisely these problems.",
        "url": "https://docs.spaceuptech.com/introduction/motivation/#our-motivation" 
    },
    {
        "index": "Introduction",
        "title": "Design Goals",
        "sub_title": "Design Goals",
        "page": "Design Goals",
        "heading": "Design Goals",
        "description": "Many design decisions were taken by us while creating Space Cloud. These decisions form the guiding principles which heavily influence the roadmap ahead. Understanding them would also make our objectives of creating Space Cloud a lot more clear.",
        "url": "https://docs.spaceuptech.com/introduction/design-goals/"
    },
    {
        "index": "Introduction",
        "title": "Design Goals",
        "sub_title": "Design Goals",
        "page": "Design Goals",
        "heading": "Ease of use",
        "description": "Space Cloud was born was to simplify the app/web development process. Right from making simple CRUD operations to syncing data reliably in a distributed environment, everything must be as simple as a function call. That’s why we chose to have a consistent API across all the databases/technologies we support. Well, it also means that Space Cloud needs to be as unopinionated as possible to reuse the existing skill sets and tech you might have, which is also why we added the support of GraphQL to Space Cloud since frontend developers love it.",
        "url": "https://docs.spaceuptech.com/introduction/design-goals/#ease-of-use"
    },
    {
        "index": "Introduction",
        "title": "Design Goals",
        "sub_title": "Design Goals",
        "page": "Design Goals",
        "heading": "Security",
        "description": "We take security so seriously that we are close to being paranoid about it. All products built with Space Cloud must be highly secure. The idea of exposing your database over a public API doesn’t sound like a good one. But to make sure we can do it securely, we have added a powerful yet flexible feature called security rules. These security rules (written in JSON) along with JWT tokens help you take care of a wide variety of authentication and authorization problems.",
        "url": "https://docs.spaceuptech.com/introduction/design-goals/#security"
    },
    {
        "index": "Introduction",
        "title": "Design Goals",
        "sub_title": "Design Goals",
        "page": "Design Goals",
        "heading": "Enterprise-ready",
        "description": "We believe that each app built with Space Cloud must be extremely robust and future proof. We shall never comprise on the robustness of the platform at any cost. This stand also means that sometimes we have to skip the urge for easy hacks to implement things in a cloud-native fashion.",
        "url": "https://docs.spaceuptech.com/introduction/design-goals/#enterprise-ready"
    },
    {
        "index": "Introduction",
        "title": "Design Goals",
        "sub_title": "Design Goals",
        "page": "Design Goals",
        "heading": "Leverage the existing tools",
        "description": "The goal of this project is not to re-invent the wheel over and over again. Instead, we prefer integration with proven technologies over implementing them ourselves. For example, we use Consul in the distributed mode for service discovery and config sync. We eat our dog food to such an extent that we have implemented the realtime module in Space Cloud is implemented on the back of Space Cloud’s in-built eventing module.",
        "url": "https://docs.spaceuptech.com/introduction/design-goals/#leverage-the-existing-tools"
    },
    {
        "index": "Introduction",
        "title": "Features",
        "sub_title": "Features",
        "page": "Features",
        "heading": "Features",
        "description": "Space Cloud comes with a whole bunch of features to help you build realtime and scalable apps:",
        "url": "https://docs.spaceuptech.com/introduction/features/"
    },
    {
        "index": "Introduction",
        "title": "Features",
        "sub_title": "Features",
        "page": "Features",
        "heading": "Database module",
        "description": "The database module is the core of Space Cloud. It allows you to perform CRUD operations on your database directly from the frontend. Supported databases ❤ : MongoDB PostgreSQL and PostgreSQL compatible databases (For eg. CockroachDB, Yugabyte etc.) MySQL and MySQL compatible databases (For eg. TiDB) SQL Server. Although the database module of Space Cloud is schemaless, it lets you optionally provide a schema via Mission Control for these added benefits: Data validation before making mutations to the database. Creation/modification of tables in SQL databases. Space Cloud allows you to perform a wide variety of CRUD operations:",
        "url": "https://docs.spaceuptech.com/introduction/features/#database-module"
    },
    {
        "index": "Introduction",
        "title": "Features",
        "sub_title": "Features",
        "page": "Features",
        "heading": "Querying",
        "description": "With Space Cloud, you can query your data in 3 ways: Read directly from a table/collection. Perform joins on multiple tables (across databases). For complex aggregations, make views on your table and read data from a view as you would from a table. Note: You can make views only on SQL databases (e.g., PostgreSQL and MySQL). You can also request data from multiple databases within a single request. Space Cloud also supports slicing and dicing of the requested data with the following operations: Filtering Sorting Pagination",
        "url": "https://docs.spaceuptech.com/introduction/features/#querying"
    },
    {
        "index": "Introduction",
        "title": "Features",
        "sub_title": "Features",
        "page": "Features",
        "heading": "Mutations",
        "description": "Mutations are used to make changes to your data. Following mutations are supported in Space Cloud: Insert multiple records. Update all records or those that match a filter. Upsert i.e. update record(s) if exists or insert. Delete all records or those that match a filter. Batch multiple mutations in a single transaction. The following operations are supported in update - set, inc, mul, max, min, currentDate, push, unset and rename.",
        "url": "https://docs.spaceuptech.com/introduction/features/#mutations"
    },
    {
        "index": "Introduction",
        "title": "Features",
        "sub_title": "Features",
        "page": "Features",
        "heading": "Realtime subscriptions",
        "description": "Subscriptions is used to sync data in realtime. You can subscribe to the data you are interested in, and Space Cloud guarantees to notify you whenever anything changes in that result set.",
        "url": "https://docs.spaceuptech.com/introduction/features/#realtime-subscriptions"
    },
    {
        "index": "Introduction",
        "title": "Features",
        "sub_title": "Features",
        "page": "Features",
        "heading": "File Storage Module",
        "description": "With the file storage module your frontend can: Upload and download files. Create folders. Delete file(s) and/or folder(s). Supported storage mechanisms are: Amazon S3 Google Cloud Storage Digital Ocean Spaces Local file storage",
        "url": "https://docs.spaceuptech.com/introduction/features/#file-storage-module"
    },
    {
        "index": "Introduction",
        "title": "Features",
        "sub_title": "Features",
        "page": "Features",
        "heading": "GraphQL APIs for Restful Services",
        "description": "Services are a means to extend Space Cloud using microservices and serverless functions. You can write your microservices in the form of HTTP services that run alongside Space Cloud. These services can be accessed securely via GraphQL or directly. Notable features of Remote services: Can be triggered from frontend directly or from other remote services. Space Cloud authorizes all calls to remote services via the security rules. Perform joins on remote services and databases via the GraphQL API of Space Cloud.",
        "url": "https://docs.spaceuptech.com/introduction/features/#graphql-apis-for-restful-services"
    },
    {
        "index": "Introduction",
        "title": "Features",
        "sub_title": "Features",
        "page": "Features",
        "heading": "Eventing Module",
        "description": "Eventing module is used to asynchronously trigger your microservices or serverless functions (e.g., AWS Lambda functions) based on any events in your app. All event triggers are: Reliable - Each event, triggers a webhook reliably. Trackable - Stored in the database so that you can use them for other purposes.",
        "url": "https://docs.spaceuptech.com/introduction/features/#eventing-module"
    },
    {
        "index": "Introduction",
        "title": "Features",
        "sub_title": "Features",
        "page": "Features",
        "heading": "Authorization",
        "description": "All requests to the database, file storage and remote services go through the authorization layer. The authorization layer decides whether the request should be allowed or not based on the security rules you have provided in Mission Control and the JWT token present in the request. Security rules allow you to: Allow/Deny access to requests unconditionally. Grant access only to authenticated requests (ones that have a valid JWT token). Evaluate conditions based on data from databases and incoming requests to grant access. Trigger webhooks to determine whether a request is authorized or not.",
        "url": "https://docs.spaceuptech.com/introduction/features/#authorization"
    },
    {
        "index": "Introduction",
        "title": "Features",
        "sub_title": "Features",
        "page": "Features",
        "heading": "Granularity of security rules",
        "description": "Database: Operation (create, read, update, delete) level rules for each collection / table (eg: delete operation in posts collection). Remote Services: Endpoint level. File Storage: Operation (create, read, delete) level rules for each path prefix.",
        "url": "https://docs.spaceuptech.com/introduction/features/#granularity-of-security-rules"
    },
    {
        "index": "Introduction",
        "title": "Features",
        "sub_title": "Features",
        "page": "Features",
        "heading": "Deployments Module",
        "description": "The Deployments Module automatically deploys and scales your docker images on any Kubernetes cluster. It has first-class support of Istio. Hence all your services enjoy the benefit of using a Service Mesh. In a nutshell, the deployments module lets you: Deploy docker images to Kubernetes Fully encrypt all internal traffic by default for enhanced security. AutoScale HTTP workloads even down to zero! Define service to service communication policy for easy compliance with regulations.",
        "url": "https://docs.spaceuptech.com/introduction/features/#deployments-module"
    },
    {
        "index": "Introduction",
        "title": "Architecture",
        "sub_title": "Architecture",
        "page": "Architecture",
        "heading": "Architecture",
        "description": "This guide is coming soon!",
        "url": "https://docs.spaceuptech.com/introduction/architecture/"
    },
    { 
        "index": "Introduction",
        "title": "Setting up a Project",
        "sub_title": "Setting up a Project",
        "page": "Setting up a Project",
        "heading": "Setting up a Project",
        "description": "This section talks in-depth about setting up a frontend or backend project to use Space Cloud in your preferred language. Note: Make sure you have already deployed Space Cloud.",
        "url": "https://docs.spaceuptech.com/introduction/setting-up-project/" 
    },
    { 
        "index": "Introduction",
        "title": "Setting up a Project",
        "sub_title": "Setting up a Project",
        "page": "Setting up a Project",
        "heading": "Available options",
        "description": "Space Cloud supports both GraphQL and REST (HTTP and WebSockets) APIs so that you can stick to what you find comfortable.",
        "url": "https://docs.spaceuptech.com/introduction/setting-up-project/" 
    },
    { 
        "index": "Introduction",
        "title": "Setting up a Project",
        "sub_title": "Setting up a Project",
        "page": "Setting up a Project",
        "heading": "GraphQL API",
        "description": "GraphQL is the recommended way to use Space Cloud. It unlocks incredible powers like joins which are not exposed by REST APIs yet. You can use any GraphQL client out there to talk to Space Cloud. However, we recommend using a popular open-source client (e.g. Apollo). Follow this guide to set up Apollo client (recommended for graphql) in your javascript project. Note: The file storage and user management APIs are only available via REST APIs as of now.",
        "url": "https://docs.spaceuptech.com/introduction/setting-up-project/" 
    },
    { 
        "index": "Introduction",
        "title": "Setting up a Project",
        "sub_title": "Setting up a Project",
        "page": "Setting up a Project",
        "heading": "REST API",
        "description": "You can use the REST APIs of Space Cloud if you are more comfortable with REST. For file storage and user management module, REST is the only option as of now. To make it easy to consume the REST APIs in web projects, we have created a Javascript SDK which consumes REST APIs internally. Follow this guide to set up Javascript SDK in your project.",
        "url": "https://docs.spaceuptech.com/introduction/setting-up-project/" 
    },
    {
        "index": "Introduction",
        "title": "Setting up a Project",
        "sub_title": "Setting up graphql",
        "page": "Setting up graphql",
        "heading": "Setting up graphql",
        "description": "This guide is for setting up Apollo client in your javascript projects.",
        "url": "https://docs.spaceuptech.com/introduction/setting-up-project/graphql/"
    },
    {
        "index": "Introduction",
        "title": "Setting up a Project",
        "sub_title": "Setting up graphql",
        "page": "Setting up graphql",
        "heading": "Basic client",
        "description": "The basic client uses the HTTP link which is enough if you don’t intend to use subscriptions. See advanced client for subscriptions.",
        "url": "https://docs.spaceuptech.com/introduction/setting-up-project/graphql/#basic-client"
    },
    {
        "index": "Introduction",
        "title": "Setting up a Project",
        "sub_title": "Setting up graphql",
        "page": "Setting up graphql",
        "heading": "Installing dependencies",
        "description": "npm install --save apollo-client apollo-cache-inmemory apollo-link-http graphql-tag",
        "url": "https://docs.spaceuptech.com/introduction/setting-up-project/graphql/#installing-dependencies"
    },
    {
        "index": "Introduction",
        "title": "Setting up a Project",
        "sub_title": "Setting up graphql",
        "page": "Setting up graphql",
        "heading": "Creating client",
        "description": "The URI for the client takes two parameters: PROJECT_ID: Unique identifier of a project. It’s derived by converting your project name to lowercase and replacing all spaces and hyphens to underscores. For example Todo App becomes todo_app. SPACE_CLOUD_URL: This is the URL of your space-cloud binary. It’s http://localhost:4122 or https://localhost:4126 for HTTP and HTTPS endpoints respectively. Note: Replace localhost with the address of your Space Cloud if you are not running it locally. Example: import { ApolloClient } from 'apollo-client'; import { InMemoryCache } from 'apollo-cache-inmemory'; import { HttpLink } from 'apollo-link-http'; const link = new HttpLink({ uri: 'http://localhost:4122/v1/api/PROJECT_ID/graphql' }) const client = new ApolloClient({ link, cache: new InMemoryCache() })",
        "url": "https://docs.spaceuptech.com/introduction/setting-up-project/graphql/#creating-client"
    },
    {
        "index": "Introduction",
        "title": "Setting up a Project",
        "sub_title": "Setting up graphql",
        "page": "Setting up graphql",
        "heading": "Making your first query",
        "description": "import gql from \"graphql-tag\"; client .query({ query: gql` query { pokemons @mongo { name } } ` }).then(result => console.log(result)); Note: To query a database, you need to mention a @directive to specify which database you want to query. The directives for databases are: @mongo: For MongoDB @postgres : For PostgreSQL and PostgreSQL compatible databases (eg: CockroachDB, Yugabyte) @mysql: For MySQL and MySQL compatible databases (eg: TiDB) @sqlserver: For SQL Server",
        "url": "https://docs.spaceuptech.com/introduction/setting-up-project/graphql/#making-your-first-query"
    },
    {
        "index": "Introduction",
        "title": "Setting up a Project",
        "sub_title": "Setting up graphql",
        "page": "Setting up graphql",
        "heading": "Advanced client",
        "description": "This client setup uses both the HTTP and WebSocket links smartly based on the type of request.",
        "url": "https://docs.spaceuptech.com/introduction/setting-up-project/graphql/#advanced-client"
    },
    {
        "index": "Introduction",
        "title": "Setting up a Project",
        "sub_title": "Setting up graphql",
        "page": "Setting up graphql",
        "heading": "Installing dependencies",
        "description": "npm install --save apollo-client apollo-link-ws apollo-link-http apollo-link apollo-utilities apollo-cache-inmemory subscriptions-transport-ws graphql-tag",
        "url": "https://docs.spaceuptech.com/introduction/setting-up-project/graphql/#advanced-client"
    },
    {
        "index": "Introduction",
        "title": "Setting up a Project",
        "sub_title": "Setting up graphql",
        "page": "Setting up graphql",
        "heading": "Creating client",
        "description": "We are using the capability of splitting links to choose a link based on the operation dynamically. All queries and mutations go over the HTTP link, whereas the subscriptions go over the WebSocket link. Example: import ApolloClient from \"apollo-client\"; import { WebSocketLink } from 'apollo-link-ws'; import { HttpLink } from 'apollo-link-http'; import { split } from 'apollo-link'; import { getMainDefinition } from 'apollo-utilities'; import { InMemoryCache } from 'apollo-cache-inmemory'; const httpLink = new HttpLink({ uri: \"http://localhost:4122/v1/api/PROJECT_ID/graphql\", // use https for secure endpoint }); const wsLink = new WebSocketLink({ uri: \"ws://localhost:4122/v1/api/PROJECT_ID/graphql/socket\", // use wss for a secure endpoint options: { reconnect: true } }); const link = split( // split based on operation type ({ query }) => { const { kind, operation } = getMainDefinition(query); return kind === 'OperationDefinition' && operation === 'subscription'; }, wsLink, httpLink, ); // Instantiate client const client = new ApolloClient({ link, cache: new InMemoryCache() })",
        "url": "https://docs.spaceuptech.com/introduction/setting-up-project/graphql/#advanced-client"
    },
    {
        "index": "Introduction",
        "title": "Setting up a Project",
        "sub_title": "Setting up graphql",
        "page": "Setting up graphql",
        "heading": "Subscribing to data",
        "description": "import gql from \"graphql-tag\"; const subscription = client.subscribe({ query: gql` subscription { caught_pokemons( where: {trainer_id: TRAINER_ID} ) @mongo { type payload # Contains the actual document find # Object containing the unique fields of the concerned document } } ` }) subscription.subscribe(value => console.log(value));  ",
        "url": "https://docs.spaceuptech.com/introduction/setting-up-project/graphql/#subscribing-to-data"
    },
    {
        "index": "Introduction",
        "title": "Setting up a Project",
        "sub_title": "Setting up graphql",
        "page": "Setting up graphql",
        "heading": "Next steps",
        "description": "Great! You have initialized the graphql client in your project. Feel free to check out various capabalities of space-cloud: Perform database queries Mutate data Realtime data sync across all devices Manage files with ease using File Storage module Authenticate your users Write custom business logic Secure your apps",
        "url": "https://docs.spaceuptech.com/introduction/setting-up-project/graphql/#next-steps"
    },
    {
        "index": "Introduction",
        "title": "Setting up a Project",
        "sub_title": "Javascript client SDK",
        "page": "Javascript client SDK",
        "heading": "Javascript client SDK",
        "description": "Follow this guide to use javascript client SDK in your web app or any Javascript/Node.js project.",
        "url": "https://docs.spaceuptech.com/introduction/setting-up-project/javascript/"
    },
    {
        "index": "Introduction",
        "title": "Setting up a Project",
        "sub_title": "Javascript client SDK",
        "page": "Javascript client SDK",
        "heading": "Step 1: Install Space Cloud API",
        "description": "Install via npm: npm install space-api --save Or import as a stand-alone library: <script src=\"https://spaceuptech.com/downloads/libraries/space-api.js\"></script>",
        "url": "https://docs.spaceuptech.com/introduction/setting-up-project/javascript/#step-1-install-space-cloud-api"
    },
    {
        "index": "Introduction",
        "title": "Setting up a Project",
        "sub_title": "Javascript client SDK",
        "page": "Javascript client SDK",
        "heading": "Step 2: Create an API instance",
        "description": "An api instance of Space Cloud on the frontend helps you talk to space-cloud binary and perform backend operations directly from the frontend. The API constructor takes two parameters: PROJECT_ID: Unique identifier of a project. It’s derived by converting your project name to lowercase and replacing all spaces and hyphens to underscores. For example Todo App becomes todo_app. SPACE_CLOUD_URL: This is the URL of your space-cloud binary. It’s http://localhost:4122 or https://localhost:4126 for HTTP and HTTPS endpoints respectively. Note: Replace localhost with the address of your Space Cloud if you are not running it locally. For ES6: import { API } from 'space-api'; const api = new API('todo_app', 'http://localhost:4122'); For ES5/CommonJS: const { API } = require('space-api'); const api = new API('todo_app', 'http://localhost:4122'); For stand-alone: var api = new Space.API(\"todo_app\", \"http://localhost:4122\");",
        "url": "https://docs.spaceuptech.com/introduction/setting-up-project/javascript/#step-2-create-an-api-instance"
    },
    {
        "index": "Introduction",
        "title": "Setting up a Project",
        "sub_title": "Javascript client SDK",
        "page": "Javascript client SDK",
        "heading": "Step 3: Create a DB instance",
        "description": "The API instance created above helps you to use file storage and services modules directly. However, to use database and realTime modules, you also have to create a db instance. Note: You can use multiple databases in the same project. (For, eg. MongoDB and MySQL) For MongoDB: const db = api.Mongo(); For PostgreSQL: Note: This works for all databases that are PostgreSQL compatible (For, e.g. CockroachDB and Yugabyte) const db = api.Postgres(); For MySQL: Note: This works for all databases that are MySQL compatible (For, e.g. TiDB) const db = api.MySQL();",
        "url": "https://docs.spaceuptech.com/introduction/setting-up-project/javascript/"
    },
    {
        "index": "Introduction",
        "title": "Setting up a Project",
        "sub_title": "Javascript client SDK",
        "page": "Javascript client SDK",
        "heading": "Next steps",
        "description": "Great! Since you have initialized the api and db instance, you can start building apps with space-cloud. Feel free to check out various capabalities of space-cloud: Perform database queries Mutate data Realtime data sync across all devices Manage files with ease using File Storage module Authenticate your users Write custom business logic Secure your apps",
        "url": "https://docs.spaceuptech.com/introduction/setting-up-project/javascript/#next-steps"
    }, 
    {
        "index": "Install",
        "title": "Install",
        "sub_title": "Install",
        "page": "Install",
        "heading": "Install",
        "description": "This section talks in-depth about deploying Space Cloud in production. If you would like to take Space Cloud for a quick spin, refer to our Space Cloud Basics Guide. Note: Make sure that any database that you want to integrate with Space Cloud is up and running.",
        "url": "https://docs.spaceuptech.com/install/"
    },
    {
        "index": "Install",
        "title": "Install",
        "sub_title": "Install",
        "page": "Install",
        "heading": "Deployment guides",
        "description": "Choose one of the guides below to deploy Space Cloud: Docker (recommended for local setup) Kubernetes (recommended for production)",
        "url": "https://docs.spaceuptech.com/install/"
    },
    { 
        "index": "Install",
        "title": "Docker",
        "sub_title": "Docker",
        "page": "Docker",
        "heading": "Docker",
        "description": "The first step to start using Space Cloud is setting it up. Space Cloud requires several components to be running for proper functions. The most important components are: Gateway: Responsible for ingress traffic and generation of REST / GaphQL APIs Runner: Responsible for intra-cluster traffic and policy enforcement Container Registry: Responsible for storing docker images. We won’t be needing this for local setup. Luckily, we don’t have to interact with these components directly. Space Cloud ships with a utility named space-cli which bootstraps a cluster for us.",
        "url": "https://docs.spaceuptech.com/install/docker/" 
    },
    { 
        "index": "Install",
        "title": "Docker",
        "sub_title": "Docker",
        "page": "Docker",
        "heading": "Prerequisites",
        "description": "Make sure you have Docker installed.",
        "url": "https://docs.spaceuptech.com/install/docker/#prerequisites" 
    },
    { 
        "index": "Install",
        "title": "Docker",
        "sub_title": "Docker",
        "page": "Docker",
        "heading": "Downloading Space CLI",
        "description": "The first step is downloading space-cli. You can download a version for your particular platform: Linux MacOS Windows Unzip the compressed archive.For Linux / Mac: unzip space-cli.zip && chmod +x space-cli For Windows: Right-click on the archive and select extract here. To make sure if the space-cli binary is correct, type the following command from the directory where you downloaded space-cli: For Linux / Mac: ./space-cli -v For Windows: space-cli.exe -v The above command will print the space-cli version. Optionally, you can copy the space-cli binary to your environment path variable for global usage.",
        "url": "https://docs.spaceuptech.com/install/docker/#downloading-space-cli" 
    },
    { 
        "index": "Install",
        "title": "Docker",
        "sub_title": "Docker",
        "page": "Docker",
        "heading": "Setting up Space Cloud",
        "description": "We can set up all Space Cloud components using a single command. ./space-cli setup --dev The setup command selects Docker as a target by default and runs all the containers required to setup Space Cloud. On successful installation it generates an output similar to this one: INFO[0000] Setting up space cloud on Docker INFO[0000] Starting container space-cloud-gateway... INFO[0000] Starting container space-cloud-runner... INFO[0001] Space Cloud (id: \"local-admin\") has been successfully setup! :D INFO[0001] You can visit mission control at http://localhost:4122/mission-control INFO[0001] Your login credentials: [username: \"local-admin\"; key: \"kUkqBffI1ISR\"]",
        "url": "https://docs.spaceuptech.com/install/docker/#setting-up-space-cloud" 
    },
    { 
        "index": "Install",
        "title": "Docker",
        "sub_title": "Docker",
        "page": "Docker",
        "heading": "Verify Installation",
        "description": "Verify the installation run the following docker command: docker ps --filter=name=space-cloud",
        "url": "https://docs.spaceuptech.com/install/docker/#verify-installation" 
    },
    { 
        "index": "Install",
        "title": "Docker",
        "sub_title": "Docker",
        "page": "Docker",
        "heading": "Next Steps",
        "description": "Awesome! We just started Space Cloud using Docker. Next step would be to set up a project to use Space Cloud in your preferred language. Feel free to check out various capabilities of space-cloud: Perform database operations Mutate data Realtime data sync across all devices Manage files with ease using File Storage module Authenticate your users Explore Space Cloud’s microservice capability",
        "url": "https://docs.spaceuptech.com/install/docker/#next-steps" 
    },
    { 
        "index": "Install",
        "title": "Kubernetes",
        "sub_title": "Kubernetes",
        "page": "Kubernetes",
        "heading": "Kubernetes",
        "description": "The first step to start using Space Cloud is setting it up. Space Cloud requires several components to be running for proper functions. The most important components are: Gateway: Responsible for ingress traffic and generation of REST / GaphQL APIs Runner: Responsible for intra-cluster traffic and policy enforcement Container Registry: Responsible for storing docker images. We won’t be needing this for local setup. Luckily, we don’t have to interact with these components directly. Space Cloud ships with a utility named space-cli which bootstraps a cluster for us.",
        "url": "https://docs.spaceuptech.com/install/kubernetes/" 
    },
    { 
        "index": "Install",
        "title": "Kubernetes",
        "sub_title": "Kubernetes",
        "page": "Kubernetes",
        "heading": "Choosing a Installation Guide",
        "description": "There are many ways to get started with Kubernetes. Choose a guide which works for you best: MicroK8s (recommended for local deployment with k8s) Minikube Cloud Vendor (recommended for production systems)",
        "url": "https://docs.spaceuptech.com/install/kubernetes/" 
    },
    {
        "index": "Install",
        "title": "Kubernetes",
        "sub_title": "MicroK8s",
        "page": "MicroK8s",
        "heading": "MicroK8s",
        "description": "Follow these instructions to install Space Cloud on MicroK8s.",
        "url": "https://docs.spaceuptech.com/install/kubernetes/microk8s/"
    },
    {
        "index": "Install",
        "title": "Kubernetes",
        "sub_title": "MicroK8s",
        "page": "MicroK8s",
        "heading": "Step 1: Install MicroK8s",
        "description": "Install the latest version of MicroK8s for Windows, Linux or macOS. Install the required add-ons: sudo microk8s.enable DNS RBAC",
        "url": "https://docs.spaceuptech.com/install/kubernetes/microk8s/#step-1-install-microk8s"
    },
    {
        "index": "Install",
        "title": "Kubernetes",
        "sub_title": "MicroK8s",
        "page": "MicroK8s",
        "heading": "Step 2: Install Istio",
        "description": "Space Cloud requires Istio to work correctly. The default Istio profile works perfectly well. Make sure you have disabled istio-ingressgateway. Space Cloud configures and uses an internal ingress gateway. For convenience, we have already made a YAML file to install istio for a local cluster. microk8s.kubectl apply -f https://raw.githubusercontent.com/spaceuptech/space-cloud/master/install-manifests/kubernetes/local/istio.yaml Wait for all the pods to start: microk8s.kubectl get pods -n istio-system --watch",
        "url": "https://docs.spaceuptech.com/install/kubernetes/microk8s/#step-2-install-istio"
    },
    {
        "index": "Install",
        "title": "Kubernetes",
        "sub_title": "MicroK8s",
        "page": "MicroK8s",
        "heading": "Step 3: Install Space Cloud",
        "description": "To install Space Cloud, run the command: microk8s.kubectl apply -f https://raw.githubusercontent.com/spaceuptech/space-cloud/master/install-manifests/kubernetes/local/space-cloud.yaml Wait for all the pods to start: microk8s.kubectl get pods -n space-cloud --watch The last step would be to port forward Space Cloud’s ports. microk8s.kubectl port-forward -n space-cloud service/gateway 4122:4122",
        "url": "https://docs.spaceuptech.com/install/kubernetes/microk8s/#step-3-install-space-cloud"
    },
    {
        "index": "Install",
        "title": "Kubernetes",
        "sub_title": "MicroK8s",
        "page": "MicroK8s",
        "heading": "Step 4: Open Mission Control",
        "description": "You should be able to access Mission Control on http://localhost:4122/mission-control The default credentials are: Username: admin Key: 1234 You can change it by editing the ADMIN_USER and ADMIN_PASS env variables of the gateway deployment. You can find these towards the end of the space-cloud.yaml file.",
        "url": "https://docs.spaceuptech.com/install/kubernetes/microk8s/#step-4-open-mission-control"
    },
    {
        "index": "Install",
        "title": "Kubernetes",
        "sub_title": "MicroK8s",
        "page": "MicroK8s",
        "heading": "Next Steps",
        "description": "Awesome! We just started Space Cloud using Kubernetes. Next step would be to set up a project to use Space Cloud in your preferred language. Feel free to check out various capabilities of space-cloud: Perform database operations Mutate data Realtime data sync across all devices Manage files with ease using File Storage module Authenticate your users Explore Space Cloud’s microservice capability",
        "url": "https://docs.spaceuptech.com/install/kubernetes/microk8s/#next-steps"
    },
    {
        "index": "Install",
        "title": "Kubernetes",
        "sub_title": "MiniKube",
        "page": "MiniKube",
        "heading": "MiniKube",
        "description": "Follow these instructions to install Space Cloud on Minikube.",
        "url": "https://docs.spaceuptech.com/install/kubernetes/minikube/"
    },
    {
        "index": "Install",
        "title": "Kubernetes",
        "sub_title": "MiniKube",
        "page": "MiniKube",
        "heading": "Step 1: Install Minikube",
        "description": "Install the latest version of Minikube for Windows, Linux or macOS. Start minikube: minikube start --cpus=4 --memory=8096 Make sure you have kubectl installed.",
        "url": "https://docs.spaceuptech.com/install/kubernetes/minikube/#step-1-install-minikube"
    },
    {
        "index": "Install",
        "title": "Kubernetes",
        "sub_title": "MiniKube",
        "page": "MiniKube",
        "heading": "Step 2: Install Istio",
        "description": "Space Cloud requires Istio to work correctly. The default Istio profile works perfectly well. Make sure you have disabled istio-ingressgateway. Space Cloud configures and uses an internal ingress gateway. For convenience, we have already made a YAML file to install istio for a local cluster. kubectl apply -f https://raw.githubusercontent.com/spaceuptech/space-cloud/master/install-manifests/kubernetes/local/istio.yaml Wait for all the pods to start: kubectl get pods -n istio-system --watch",
        "url": "https://docs.spaceuptech.com/install/kubernetes/minikube/#step-2-install-istio"
    },
    {
        "index": "Install",
        "title": "Kubernetes",
        "sub_title": "MiniKube",
        "page": "MiniKube",
        "heading": "Step 3: Install Space Cloud",
        "description": "To install Space Cloud, run the command: kubectl apply -f https://raw.githubusercontent.com/spaceuptech/space-cloud/master/install-manifests/kubernetes/local/space-cloud.yaml Wait for all the pods to start: kubectl get pods -n space-cloud --watch",
        "url": "https://docs.spaceuptech.com/install/kubernetes/minikube/#step-3-install-space-cloud"
    },
    {
        "index": "Install",
        "title": "Kubernetes",
        "sub_title": "MiniKube",
        "page": "MiniKube",
        "heading": "Step 4: Open Mission Control",
        "description": "You should be able to access Mission Control on http://$(minikube ip):30122/mission-control Set up port forwarding to access Mission Control on localhost:4122. kubectl port-forward -n space-cloud service/gateway 4122:4122 You should be able to access Mission Control on http://localhost:4122/mission-control. The default credentials are: Username: admin Key: 1234 You can change it by editing the ADMIN_USER and ADMIN_PASS env variables of the gateway deployment. You can find these towards the end of the space-cloud.yaml file.",
        "url": "https://docs.spaceuptech.com/install/kubernetes/minikube/#step-4-open-mission-control"
    },
    {
        "index": "Install",
        "title": "Kubernetes",
        "sub_title": "MiniKube",
        "page": "MiniKube",
        "heading": "Next Steps",
        "description": "Awesome! We just started Space Cloud using Kubernetes. Next step would be to set up a project to use Space Cloud in your preferred language. Feel free to check out various capabilities of space-cloud: Perform database operations Mutate data Realtime data sync across all devices Manage files with ease using File Storage module Authenticate your users Explore Space Cloud’s microservice capability",
        "url": "https://docs.spaceuptech.com/install/kubernetes/minikube/#next-steps"
    },
    {
        "index": "Install",
        "title": "Kubernetes",
        "sub_title": "Cloud",
        "page": "Cloud",
        "heading": "Cloud",
        "description": "Follow these instructions to install a production Space Cloud cluster on any cloud vendor.",
        "url": "https://docs.spaceuptech.com/install/kubernetes/cloud/"
    },
    {
        "index": "Install",
        "title": "Kubernetes",
        "sub_title": "Cloud",
        "page": "Cloud",
        "heading": "Prerequisites",
        "description": "Make sure you have a Kubernetes cluster ready. Point kubectl to your cluster Each node must have a minimum of 2 CPUs",
        "url": "https://docs.spaceuptech.com/install/kubernetes/cloud/#prerequisites"
    },
    {
        "index": "Install",
        "title": "Kubernetes",
        "sub_title": "Cloud",
        "page": "Cloud",
        "heading": "Step 1: Install Istio",
        "description": "Space Cloud requires Istio to work correctly. The default Istio profile works perfectly well. Make sure you have disabled istio-ingressgateway. Space Cloud configures and uses an internal ingress gateway. For convenience, we have already made a YAML file to install istio for a production cluster. kubectl apply -f https://raw.githubusercontent.com/spaceuptech/space-cloud/master/install-manifests/kubernetes/prod/istio.yaml Wait for all the pods to start: kubectl get pods -n istio-system --watch",
        "url": "https://docs.spaceuptech.com/install/kubernetes/cloud/#step-1-install-istio"
    },
    {
        "index": "Install",
        "title": "Kubernetes",
        "sub_title": "Cloud",
        "page": "Cloud",
        "heading": "Step 2: Install Space Cloud",
        "description": "To install Space Cloud, run the command: kubectl apply -f https://raw.githubusercontent.com/spaceuptech/space-cloud/master/install-manifests/kubernetes/prod/space-cloud.yaml Wait for all the pods to start: kubectl get pods -n space-cloud --watch",
        "url": "https://docs.spaceuptech.com/install/kubernetes/cloud/#step-2-install-space-cloud"
    },
    {
        "index": "Install",
        "title": "Kubernetes",
        "sub_title": "Cloud",
        "page": "Cloud",
        "heading": "Step 3: Open Mission Control",
        "description": "You should be able to access Mission Control on http://LOADBALANCER_IP:4122/mission-control You can find the public IP address by running: kubectl get -n space-cloud svc gateway Set up port forwarding to access Mission Control on localhost:4122. kubectl port-forward -n space-cloud service/gateway 4122:4122 You should be able to access Mission Control on http://localhost:4122/mission-control. The default credentials are: Username: admin Key: 1234 You can change it by editing the ADMIN_USER and ADMIN_PASS env variables of the gateway deployment. You can find these towards the end of the space-cloud.yaml file.",
        "url": "https://docs.spaceuptech.com/install/kubernetes/cloud/#step-3-open-mission-control"
    },
    {
        "index": "Install",
        "title": "Kubernetes",
        "sub_title": "Cloud",
        "page": "Cloud",
        "heading": "Next Steps",
        "description": "Awesome! We just started Space Cloud using Kubernetes. Next step would be to set up a project to use Space Cloud in your preferred language. Feel free to check out various capabilities of space-cloud: Perform database operations Mutate data Realtime data sync across all devices Manage files with ease using File Storage module Authenticate your users Explore Space Cloud’s microservice capability",
        "url": "https://docs.spaceuptech.com/install/kubernetes/cloud/#next-steps"
    },
    {
        "index": "Storage",
        "title": "Storage",
        "sub_title": "Storage",
        "page": "Storage",
        "heading": "Storage",
        "description": "This section covers the following features of Space Cloud: Database Module: Create instant realtime GraphQL APIs on Postgres, MySQL, SQLServer and MongoDB. File Storage Module: Scalable file storage APIs backed by Amazon S3 and Google Cloud Storage.",
        "url": "https://docs.spaceuptech.com/storage/"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Database",
        "page": "Database",
        "heading": "Database",
        "description": "The database module is responsible for creating Instant, GraphQL APIs for all supported databases. It also supports a subscriptions feature which lets you listen on database changes in realtime. Currently the database module supports the following databases ❤ : MongoDB PostgreSQL and PostgreSQL compatible databases (For eg. CockroachDB, Yugabyte etc.) MySQL and MySQL compatible databases (For eg. TiDB) SQL Server Although the database module of Space Cloud is schemaless, it lets you optionally provide a schema via Mission Control for these added benefits: Data validation before making mutations to the database. Creation/modification of tables in SQL databases.",
        "url": "https://docs.spaceuptech.com/storage/database/"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Database",
        "page": "Database",
        "heading": "Next Steps:",
        "description": "We recommend starting with the data modelling guide to learn how you can create / edit tables, indexes and relations in Space Cloud in a declarative manner",
        "url": "https://docs.spaceuptech.com/storage/database/"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Data Modelling",
        "heading": "Data Modelling",
        "description": "With Space Cloud, you can quickly model your data and the relations that exist between them via the GraphQL Schema Definition Language (SDL). Data modelling in Space Cloud has two significant roles: Define the underlying database schema (Space Cloud maps the types and directives you mention to database tables and constraints). Data validation layer (Space Cloud validates the request for correct schema before any mutations. This is especially helpful for schemaless databases like MongoDB). If you are already excited and want to take the data modelling in Space Cloud for a quick spin, follow this guide.",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Data Modelling",
        "heading": "How it works",
        "description": "With Space Cloud, you can easily model your databases using a Schema Definition Language (SDL) which is consistent across all databases.",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Data Modelling",
        "heading": "Creating table",
        "description": "While creating a table/collection through Mission Control, you provide its schema which looks something like this: type post { id: ID! @primary title: String! text: String! category: String is_published: Boolean! published_date: DateTime } Space Cloud creates a table with all the constraints in the underlying database as per the schema you have mentioned.",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Data Modelling",
        "heading": "Updating schema",
        "description": "If you want to change the schema, then you go to the Schema tab in the Database section and modify the schema. Space Cloud updates the table structure based on the new schema.",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Data Modelling",
        "heading": "Data validation",
        "description": "Whenever anyone performs a mutation on any table/collection, Space Cloud validates the data before actually performing the mutation on database. Thus, Space Cloud provides you with a decoupled validation plane which works independently of the database. This validation plane is especially helpful in schemaless databases.",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Data Modelling",
        "heading": "Features",
        "description": "Supported data types: string, integer, float, boolean, datetime. Optional auto-generated unique ID fields. Optional auto-generated createdAt and updatedAt timestamps. Constraints like unique key, foreign key, primary key, default values and not null. Managing indexes. Data validation on CRUD operation.",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Getting Started",
        "heading": "Getting Started",
        "description": "This guide helps you model a Pokemon app 😛 to explore the data modelling in Space Cloud! Note: This guide assumes PostgreSQL as the database, but you can use whichever you like.",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/quick-start/"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Getting Started",
        "heading": "Setup",
        "description": "If you want to follow this guide along practically, first deploy Space Cloud along with PostgreSQL and create a project in Mission Control with PostgreSQL as the primary database. Then head over to the Overview tab in the Database section. Time for some data modelling now!",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/quick-start/#setup"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Getting Started",
        "heading": "Modelling the data",
        "description": "The Pokemon app which we are going to build have trainers and pokemons (quite obvious😅). Each pokemon belongs to a single trainer, and each trainer can have multiple pokemons😋. Note that this a one-to-many relationship. Read more about modelling relations here.",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/quick-start/#modelling-the-data"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Getting Started",
        "heading": "Trainer table",
        "description": "We want each trainer to have a unique id, name and city field. Click the Add table button in the Database Overview page in Mission Control to open the following form: Add table screen Name your table as trainer. Copy-paste the following schema and hit Save: type trainer { id: ID! @primary name: String! city: String pokemons: [pokemon] @link(table: \"pokemon\", from: \"id\", to: \"trainer_id\") } Space Cloud creates a trainer table with the above schema. The exclamation mark ! for id and name indicates that these fields are required (i.e. they can’t be null). Note: The pokemons field is not a physical field in the trainer table. It’s just a virtual field that links to the pokemon table to make GraphQL queries and mutations simpler from the frontend. We are going to cover it in more details below.",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/quick-start/#trainer-table"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Getting Started",
        "heading": "Pokemon table",
        "description": "Let’s say a trainer wants to record the name and combat power of each pokemon along with the date when he captured it. Once again click on the Add table button to add the pokemon table with the following schema: type pokemon { id: ID! @primary name: String! combat_power: Integer caught_on: DateTime! @createdAt trainer_id: ID! @foreign(table: \"trainer\", field: \"id\") } The @foreign directive above instructs Space Cloud to create a foreign key on the id field of the trainer table. This foreign key prevents any actions that would destroy the links between the pokemon and trainer table. Which means that the database would throw an error if you delete a trainer before deleting their pokemons. The @createdAt directive helps Space Cloud to automatically insert the datetime value whenever you insert a pokemon into the pokemon table.",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/quick-start/#pokemon-table"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Getting Started",
        "heading": "Time to play around",
        "description": "Let’s insert some data and see whether Space Cloud is validating our data and maintaining its integrity or not. Head over to the Explorer section in Mission Control: Explorer",        
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/quick-start/#time-to-play-around"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Getting Started",
        "heading": "Inserting trainers along with their pokemons",
        "description": "Try running the following graphql queries to insert some trainers and pokemons: mutation { insert_trainer( docs: [ { id: \"ash\", name: \"Ash\", city: \"Pallete Town\", pokemons: [ { id: \"1\", name: \"Pikachu\", combat_power: 200 }, { id: \"2\", name: \"Charmender\", combat_power: 150 } ] }, { id: \"misty\", name: \"Misty\", city: \"Cerulean City\", pokemons: [ { id: \"3\", name: \"Psyduck\", combat_power: 180 }, { id: \"4\", name: \"Goldeen\", combat_power: 150 } ] } ] ) @postgres { status error } } You would see a response like this: { \"insert_trainer\": { \"status\": 200 } } This means we have successfully inserted trainers along with their pokemons. Space Cloud inserts the trainers info in the trainer table while the nested pokemons info in the pokemon table. If you remember, we mentioned a @link directive on the pokemons field in the trainer table along with the argument - table: \"pokemon\". Space Cloud uses this information to insert the pokemons array correctly into the pokemon table. It also inserts the pokemon.trainer_id field automatically based on the foreign key that we mentioned.",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/quick-start/#inserting-trainers-along-with-their-pokemons"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Getting Started",
        "heading": "Query trainers along with their pokemons",
        "description": "Try running the following graphql query in the GraphiQL section: query { trainer @postgres { id name city pokemons { name combat_power caught_on } } } You should be able to see a response which looks like this: { \"trainer\": [ { \"id\": \"ash\", \"name\": \"Ash\", \"city\": \"Pallete Town\", \"pokemons\": [ { \"name\": \"Pikachu\", \"combat_power\": 200, \"caught_on\": \"2019-10-15T07:21:14.643874Z\" }, { \"name\": \"Charmender\", \"combat_power\": 150, \"caught_on\": \"2019-10-15T07:21:14.643876Z\" } ] }, { \"id\": \"misty\", \"name\": \"Misty\", \"city\": \"Cerulean City\", \"pokemons\": [ { \"name\": \"Psyduck\", \"combat_power\": 180, \"caught_on\": \"2019-10-15T07:21:14.643877Z\" }, { \"name\": \"Goldeen\", \"combat_power\": 150, \"caught_on\": \"2019-10-15T07:21:14.643877Z\" } ] } ] } The query that we used above performs a join operation on the backend between trainer and pokemon table with the condition - trainer.id == pokemon.trainer_id. This condition is derived by the arguments (table, from, to) of the @link directive, which we mentioned earlier. You can read more about @link directive from here. Notice that we even received the values for caught_on even though we did not specify it while inserting. It means that Space Cloud auto-generated the values for caught_on field for us! Pretty great right? It’s time to put on the devil’s hat and tinker around Space Cloud’s data validation plane!",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/quick-start/#query-trainers-along-with-their-pokemons"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Getting Started",
        "heading": "Validate data",
        "description": "Let’s check whether Space Cloud is enforcing the constraints or not that we specified (Foreign keys and required fields in our case). Try running the following query in the GraphiQL section: mutation { insert_trainer( docs: [ {id: \"brock\", city: \"Pallete Town\"}, ] ) @postgres { status } } This query should return the following error - Field name Not Present. Let’s check whether the field type validations are working or not. Try running the following query in the GraphiQL section: mutation { insert_trainer( docs: [ {id: \"brock\", name: 123, city: \"Pallete Town\"}, ] ) @postgres { status } } This query should return the following error - Integer wrong type wanted String got Integer. Note: This validation layer works even for schemaless databases! This robust validation layer ensures that no one can mess around with your data structure! 😎 Now let’s check whether the foreign keys are working or not: mutation { delete_trainer( where: {id: \"ash\"} ) @postgres { status error } } This mutation should fail with the following response: { \"delete_trainer\": { \"error\": \"pq: update or delete on table \"trainer\" violates foreign key constraint \"c_pokemon_trainer_id\" on table \"pokemon\"\", \"status\": 500 } } It means Space Cloud has created foreign keys for us which helped us maintain the integrity of the relation. Great! You have just learned the basics of data modelling in Space Cloud. The next steps would be to take a deep dive into all the field types and directives or learn modelling relations in detail.",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/quick-start/#validate-data"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Modelling Relations",
        "heading": "Modelling Relations",
        "description": "Most real-world applications have relations between their entities. Describing these relations in your schema has two significant advantages: It ensures that the integrity of relations is maintained. Simpler queries to fetch related data on frontend. (Joins are implied by the relations you describe in the schema)",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/relations/"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Modelling Relations",
        "heading": "Table relationships",
        "description": "There are three major types of database relationships: one-to-one one-to-many many-to-many In this guide, we are taking a real-world example to describe all of these relations. Let’s say we want to build an e-commerce app and have the following tables: customer, address, order and item.",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/relations/#table-relationships"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Modelling Relations",
        "heading": "Modelling relations",
        "description": "Modelling relations in Space Cloud have two parts: @foreign: Helps maintain the integrity of the relation by creating a foreign key. @link: Helps simplify the queries on frontend by linking related types in schema. In this guide, we are going to look at the best practices for modelling different types of relations in Space Cloud using the links and foreign keys. Note: Both the links and foreign keys are optional and independent of each other. For example, you can skip creating the foreign key if you don’t care about the integrity of the relationship and vice versa.",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/relations/#modelling-relations"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Modelling Relations",
        "heading": "One-to-one example",
        "description": "Let’s take an example where each customer can have only one address. Note that this is a one-to-one relationship. The schema modelling to enable this relationship is as follows: type customer { id: ID! @primary name: String! address: address! @link(table: \"address\", from: \"id\", to: \"customer_id\") } type address { id: ID! @primary street: String! pin_code: Integer! customer_id: ID! @foreign(table: \"customer\", field: \"id\") } Link: The above example links the customer.address field to the address type/table. Note: customer.address is not a physical field. It’s just a virtual field to describe the relationship between customer and address types. The advantage of describing this link is that you can now query a customer along with its address in a simple query from frontend: query { customer @mysql { id name address { street pin_code } } } The above query will join the customer and address table on the backend with the condition - customer.id == address.customer_id. This condition is described by the arguments - table, from and to of the @link directive. Foreign Key: If you have noticed, we specified a @foreign directive at the address.customer_id field. This instructs Space Cloud to create a foreign key from the address.customer_id field to the id field of the customer table. The target of the foreign key is described by the table and field arguments of the @foreign directive. A foreign key helps to maintain the integrity of the relationship, i.e. a customer can’t be deleted without deleting his address. If you also wanted to fetch an address along with its customer, then you would also have to create a similar virtual field in address table linking to the customer table: type customer { id: ID! @primary name: String! address: address! @link(table: \"address\", from: \"id\", to: \"customer_id\") } type address { id: ID! @primary street: String! pin_code: Integer! customer_id: ID! @foreign(table: \"customer\", field: \"id\") customer: customer! @link(table: \"customer\", from: \"customer_id\", to: \"id\") }",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/relations/#one-to-one-example"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Modelling Relations",
        "heading": "One-to-many example",
        "description": "The schema modelling for our customer and order (one-to-many relation) will look like these: type customer { id: ID! @primary name: String! orders: [order] @link(table: \"order\", from: \"id\", to: \"customer_id\") } type order { id: ID! @primary order_date: DateTime! amount: Float! customer_id: ID! @foreign(table: \"customer\", field: \"id\") } Note how we are expecting customer.orders to be an array of type order. However, there is no such physical field called orders in the customer table. It’s just a virtual field that is referring to the order table. So now you can perform this query on the frontend: query { customer @mysql { id name orders { id order_date amount } } } As in the previous example, we have also mentioned a @foreign directive to create a foreign key between order.customer_id and customer.id.",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/relations/#one-to-many-example"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Modelling Relations",
        "heading": "Modelling many-to-many relations",
        "description": "You can model many-to-many relationships in SQL with the help of an extra tracking table that tracks the relationships between the two tables. Let’s take an example where each order can have multiple items, and each item can be in multiple orders. To maintain this relation, we need to create a third table that tracks the relation between orders and items. To fetch an order with all of its items, we need to describe two links - first between the order and order_item table and second between the order_item and item table. Here’s an example that does this: type order { id: ID! @primary order_date: DateTime! amount: Float! items: [item] @link(table: \"order_item\", field: \"items\" from: \"id\", to: \"order_id\") } type order_item { id: ID! @primary order_id: ID! @foreign(table: \"order\", field: \"id\") item_id: ID! @relation(table: \"item\", field: \"item\") items: [item] @link (table: \"item\", from: \"item_id\", to:\"id\") } type item { id: ID! @primary name: String! description: String price: Float! } In this example, we are first linking order.items to the order_item.items field, which in turn links to the item table. Thus we can now query order along with their items in a simple query: query { order @mysql { id order_date amount items { id name description price } } } Note that we are also making two foreign keys in this case - one for the order and one for the item table.",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/relations/#modelling-many-to-many-relations"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Supported Features",
        "heading": "Supported Features",
        "description": "This guide will give a detailed explanation of object types, field types, field-constraints and directives in the Space Cloud schema definition language.",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/supported-features/"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Supported Features",
        "heading": "Object types",
        "description": "An object type is used to define a table/collection with the keyword type. Example: type post { id: ID! @primary title: String! text: String! is_published: Boolean } The above example will create a post table/collection which has the id, title, text and is_published columns/fields.",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/supported-features/#object-types"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Supported Features",
        "heading": "Field types",
        "description": "Fields are the building blocks of an object type. A field either refers to a scalar type, a nested type or a relation.",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/supported-features/#field-types"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Supported Features",
        "heading": "Scalar types",
        "description": "ID An ID is used to hold a string value of up to 50 characters. You use ID to store prominent strings in your model like the unique identifier of a row/document. Note: As of now, only field with typeID can be a primary key. Space Cloud auto-generates the value of ID fields with ksuid (sortable unique identifiers) if you don’t provide their value during an insert operation. Example: Uniquely identify an order in an e-commerce app: type order { id: ID! @primary amount: Float! } String A String holds text. String is used for fields like the title of a blog post or anything that is best represented as text. Example: type post { id: ID! @primary title: String! text: String! } In queries or mutations, String fields have to be specified using enclosing double quotes: string: \"some-string\". Integer An Integer is a number that cannot have decimals. Use this to store values such as the number of items purchased or the combat power 💪🏻 of a pokemon. Note: Int values are stored as 64 bit (ranging from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807). Example: type pokemon { id: ID! @primary name: String! combat_power: Integer! } In queries or mutations, Integer fields have to be specified without any enclosing characters: integer: 42. Float A Float is a number that can have decimals. Float helps you store values such as the price of an item or the result of some complex calculation. Example: type item { id: ID! @primary name: String! price: Float! description: String } In queries or mutations, Float fields have to be specified without any enclosing characters and an optional decimal point: float: 42, float: 4.2. Boolean A Boolean can have the value true or false. Boolean can help you keep track of settings such as whether a post is published or if a pokemon is marked favourite by his trainer 😛. Example: type pokemon { id: ID! @primary name: String! is_favourite: Boolean! } In queries or mutations, Boolean fields have to be specified without any enclosing characters: boolean: true, boolean: false. DateTime A DateTime stores date or time values. A good example might be a person’s date of birth or the date a blog post was published. Example: type post { id: ID! @primary title: String! is_published: Boolean published_date: DateTime } In queries or mutations, DateTime fields have to be specified either in ISO 8601 format with enclosing double quotes or in milliseconds since epoch without enclosing double quotes: datetime: \"2015-11-22\" datetime: \"2015-11-22T13:57:31.123Z\" datetime: 1571207400000 Nested/embedded fields Document oriented databases like MongoDB can have nested structures. Example: Let’s say each document in post collection has an embedded document called author: Note: All the embedded types for a collection are provided in the schema of the collection itself. type post { id: ID! @primary title: String! text: String! is_published: Boolean author: author } type author { id: String! name: String! } Note: The schema in MongoDB is used only for data validation.",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/supported-features/#scalar-types"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Supported Features",
        "heading": "Field constraints",
        "description": "Fields can be configured with certain constraints to add further semantics to your data model. Not null constraint You use a not-null constraint for required fields in your app. You can add a not-null constraint by adding an exclamation mark in front of the field type. Example: Making email a required field for a user: type user { id: ID! @primary email: String! name: String } Primary key constraint Primary key constraint is used to make a field as a unique identifier of the table/collection. Example: Making order_id the unique identifier of an order: type order { order_id: ID! @primary amount: Float! } Note: Space Cloud doesn’t support composite primary keys (Github issue) yet. Unique constraint A unique constraint is used to ensure that a field always has a unique value. Example: Making username of a user unique: type user { id: ID! @primary username: ID! @unique email: String! } Example: Composite unique keys: type user { id: ID! @primary first_name: String! @unique(\"group\": \"unique_name\", order: 1) last_name: String! @unique(\"group\": \"unique_name\", order: 2) } Note: The @unique index only works with type ID, Integer, Float, Boolean and DateTime. The above example creates a composite unique key on two columns - first_name and last_name. Read more about @unique directive from [here]. Foreign key constraint A foreign key constraint is used to maintain the integrity of a relation. Example: Create a foreign key on the id field of author for post table: type author { id: ID! @primary name: String! @unique } type post {  id: ID! @primary  title: String!  author: ID @foreign(table: \"author\", field: \"id\") }",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/supported-features/#field-constraints"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Supported Features",
        "heading": "Directives",
        "description": "Directives are used to provide additional information in your data model. They look like this: @name(argument: \"value\") or simply @name when there are no arguments.",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/supported-features/#directives"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Supported Features",
        "heading": "Primary key",
        "description": "The @primary directive is used to make a field as the primary key in that table/collection. Note: Only one field in a type can have @primary directive. Example: type order { id: ID! @primary amount: Float! }",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/supported-features/#primary-key"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Supported Features",
        "heading": "Unique key",
        "description": "The @unique directive is used to put a unique constraint/index on a field(s). In its simplest form it looks like this: type user { id: ID! @primary email: ID! @unique name: String! } The above schema creates an unique index on the email field. (i.e. No two users will have the same email) Note: The @unique index only works with type ID, Integer, Float, Boolean and DateTime. You can provide the following arguments in order to customize the unique index: group: (String) If two or more fields have the same group, then they form a composite unique index. order: (Integer starting from 1) Used to set the order of the column within the index . Required in case of composite unique index. Full fledged example: Make sure that the combination of first_name and last_name is unique: type user { id: ID! @primary first_name: ID! @unique(group: \"user_name\", order: 1), last_name: ID! @unique(group: \"user_name\", order: 2) } The @unique directive is used to put a unique constraint/index on a field(s). It takes the following arguments: group: Optional. A string used to name the unique index. If two or more fields have the same group, then they form a composite unique key. order: Optional. An integer used to set the order of the column within the index . Required in case of composite unique key.",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/supported-features/#unique-key"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Supported Features",
        "heading": "Default value directive",
        "description": "The @default directive is used to assign a column / field a default value. During an insert, if the field containing the @default directive wasn’t set, the default value is used Example: Setting the default value of role to user: type account { id: ID! @primary name: ID! role: ID! @default(value: \"user\") } Note: The @default directive only works with type ID, Integer, Float, Boolean and DateTime.",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/supported-features/#default-value-directive"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Supported Features",
        "heading": "Foreign directive",
        "description": "The @foreign directive is used to create a foreign key constraint. Foreign keys are used to maintain the integrity of relations in your data model. Example: Create a foreign key between the order and its customer: type customer { id: ID! @primary name: String! } type order { id: ID! @primary order_date: DateTime! amount: Float! customer_id: ID! @foreign(table: \"customer\", field: \"id\") } In the above example, a foreign key is created from the customer_id field of order table to the id field of customer table. Note: Both the fields involved in the foreign key (in this case order.customer_id and customer.id) should have the same type (ID in this case).",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/supported-features/#foreign-directive"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Supported Features",
        "heading": "Link directive",
        "description": "Links are used to model relational data. They help you fetch a type along with its related type with a simple query. Note: Links are not physical fields in table. They are virtual fields which help Space Cloud to perform join operations on the backend. The @link directive is used to link a field to: Another type/table A field within another type/table Another link Case 1: (Linking to another type/table) In this example, we are going to link the orders of a customer to orders field in customer so that you can query a customer along with all his orders. Here’s a schema example to achieve this: type customer { id: ID! @primary name: String! orders: [order] @link(table: \"order\", from: \"id\", to: \"customer_id\") } type order { id: ID! @primary order_date: DateTime! amount: Float! customer_id: ID! @foreign(table: \"customer\", field: \"id\") } Note: There is no physical orders field in the customer table. The customer.orders is a virtual field linked to another table (order table in this case). So now you can perform this query on frontend: query { customer @mysql { id name orders { id amount order_date } } } The above query results in a join between the customer and order table with the condition - customer.id == order.customer_id. This condition is described by the from and to arguments in the @link directive. Case 2: (Linking to a field in another type/table) Let’s say you want to query a customer along with the dates of all his orders. For that, we need to link the order_dates of all the orders placed by a customer. Here’s a schema example to achieve this: type customer { id: ID! @primary name: String! order_dates: [DateTime] @link(table: \"order\", field: \"order_date\", from: \"id\", to: \"customer_id\") } type order { id: ID! @primary order_date: DateTime! amount: Float! customer_id: ID! @foreign(table: \"customer\", field: \"id\") } So now you can perform this query on frontend: query { customer @mysql { id name order_dates } Case 3: (Linking to another link) Many to many relationships in SQL are tracked by a third table called the tracking table. Let’s say we want to fetch all the orders with their items. In this case, we first link the order table to the items field in order_item table (tracking table), which then links to the item table. Here’s how you can model the schema for this example: type order { id: ID! @primary order_date: DateTime! items: [item] @link(table: \"order_item\", field: \"items\", from : \"id\", to: \"order_id\") } type order_item { id: ID! @primary order_id: ID! @foreign(table: \"order\", field: \"id\") item_id: ID! @foreign(table: \"item\", field: \"id\") items: [item] @link(table: \"item\", from: \"item_id\", to: \"id\") } type item { id: ID! @primary name: String! description: String! price: Float! } So now you can perform this query on frontend: query { order @mysql { id order_date items { id name description price } } }",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/supported-features/#link-directive"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Supported Features",
        "heading": "Index directive",
        "description": "The @index directive is used to create an index on your table/collection. In its simplest form it looks like this: type user { id: ID! @primary email: ID! @index name: String! } The above schema creates an index on the email field. Note: The @unique index Note: The @index directive isn’t available on MongoDB yet and only works with type ID, Integer, Float, Boolean and DateTime. You can provide the following arguments in order to customize the index: group: (String) If two or more fields have the same group, then they form a composite index. order: (Integer starting from 1) Used to set the order of the column within the index . Required in case of composite index. sort: (String - asc|desc) Used to set the sorting of the index. Full fledged example: type user { id: ID! @primary first_name: ID! @index(group: \"user_name\", order: 1, sort: \"asc\"), last_name: ID! @index(group: \"user_name\", order: 2, sort: \"desc\") }",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/supported-features/#index-directive"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Supported Features",
        "heading": "createdAt directive",
        "description": "If you want to capture the creation time of a document/row, you should use the @createdAt directive. A good example is the order date of orde type order { id: ID! @primary order_date: DateTime! @createdAt amount: Float! } In an insert mutation, you don’t need to provide values for the fields with @createdAt directive. Space Cloud automatically inserts the values for them. Note: You can use @createdAt directive only with a DateTime field.",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/supported-features/#createdat-directive"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Data Modelling",
        "page": "Supported Features",
        "heading": "updatedAt directive",
        "description": "If you want to store the time of the last update made to a document/row, you should use the @updatedAt directive. A good example is showing the last modified date on a blog post: type post { id: ID! @primary title: String! last_edited: DateTime! @updatedAt content: String! } In an update mutation, you don’t need to provide values for the fields with @updatedAt directive. Space Cloud automatically updates the values for them. Note: You can use @updatedAt directive only with a DateTime field.",
        "url": "https://docs.spaceuptech.com/storage/database/data-modelling/supported-features/#updatedat-directive"
    },  
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Queries",
        "page": "Queries",
        "heading": "Queries",
        "description": "Queries are used to fetch data from the database via Space Cloud. Space Cloud can query data from any database (MongoDB, MySQL, PostgreSQL, and SQL Server). It even allows you to perform cross-database joins. The following topics will be covered in this section: Making simple queries Performing join operations Filtering Sorting Pagination Multiple operations Multiple queries",
        "url": "https://docs.spaceuptech.com/storage/database/queries/"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Queries",
        "page": "Simple Queries",
        "heading": "Simple Queries",
        "description": "You can fetch a single or multiple objects of the same type using a simple object query.",
        "url": "https://docs.spaceuptech.com/storage/database/queries/simple-queries/"   
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Queries",
        "page": "Simple Queries",
        "heading": "Fetch list of objects",
        "description": "Example: Let’s say we want to fetch a list of all pokemons. This is how you would do it: GraphQL query { pokemons @mongo { _id name } }",
        "url": "https://docs.spaceuptech.com/storage/database/queries/simple-queries/#fetch-list-of-objects"   
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Queries",
        "page": "Filter query results",
        "heading": "Filter query results",
        "description": "You can use where in your queries to filter results based on some field’s values. You can even use multiple filters in the same where clause using and or or. Example: Fetch details of all fire type pokemons only: query { pokemons( where: { type : { _eq: \"Fire\" }} ) @mongo { _id name } } Let’s take a look at different operators that can be used to filter results and other advanced use cases:",
        "url": "https://docs.spaceuptech.com/storage/database/queries/filtering/"   
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Queries",
        "page": "Filter query results",
        "heading": "Equality operators",
        "description": "The equality operators can be used to fetch specific objects based on equality comparison of a field. For GraphQL, the equality operators are _eq (equal to) and _ne (not equal to). Whereas for the client SDKs, these operators are == and != respectively. The following are examples of using equality operators on different types. Example: Integer (Works with Double, Float, Numeric) Fetch the list of all 3rd evolution pokemons (level is an integer field which indicates the evolution level): query { pokemons( where: { level: { _eq: 3}} ) @mongo { _id name type } } Syntatic Sugar: In GraphQL, you can skip the _eq for equality operator. Example: where: {level: 3} Example: String or Text Fetch list of all caught pokemons with name (a text field) as “Pikachu”: query { caught_pokemons ( where: { name: \"Pikachu\"} ) @mongo { _id combat_power } } Example: Boolean Fetch list of all caught pokemons that have been marked favourite by their trainer (is_favourite is a boolean field): query { caught_pokemons( where: { is_favourite: true} ) @mongo { _id name } } Example: Date (Works with Timestamp as well) Fetch list of all pokemons that you caught on some special day 😉 (caught_on is a Date field): query { caught_pokemons( where: { caught_on: \"2019-09-15\"} ) @mongo { _id name } }",
        "url": "https://docs.spaceuptech.com/storage/database/queries/filtering/#equality-operators"   
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Queries",
        "page": "Filter query results",
        "heading": "Comparison operators",
        "description": "The comparison operators can be used to fetch specific objects based on greater than or lesser than comparison of a field. For GraphQL, the comparison operators are _gt (greater than), _gte (greater than or equal to), _lt (lesser than) and _lte (lesser than or equal to). Whereas for the client SDKs, these operators are >, >=, < and <= respectively. The following are examples of using these operators on different types. Example: Integer (Works with Double, Float, Numeric) Fetch list of all strong pokemons (with combat_power of 2000 or more): query { caught_pokemons( where: { combat_power: { _gte: 2000}} ) @mongo { _id name combat_power } } Example: String or Text Fetch list of pokemons whose names begin with any letter that comes after P (essentially, a filter based on a dictionary sort): query { pokemons( where: { name: { _gt: \"P\"}} ) @mongo { _id name } } Example: Date (Works with Timestamp as well) Fetch list of all caught pokemons that are caught before a certain date: query { articles( where: { caught_on: { _lt: \"2019-09-15\"}} ) @mongo { _id name } }",
        "url": "https://docs.spaceuptech.com/storage/database/queries/filtering/#comparison-operators"   
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Queries",
        "page": "Filter query results",
        "heading": "Search operator (Regex based)",
        "description": "The regex based search operator in Space Cloud is used to compare field values to a particular regex pattern. Example: Make an case insensitive search for all pokemons that have word strong in their description: query { pokemons( where: { description: { _regex: \"(?i)strong\"}} ) @mongo { _id name } } Note: The regex operator is mapped to the ~ operator in Postgres, $regex operator in MongoDB and REGEXP in MySQL.",
        "url": "https://docs.spaceuptech.com/storage/database/queries/filtering/#search-operator-regex-based"   
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Queries",
        "page": "Filter query results",
        "heading": "List based operators",
        "description": "The list-based operators can be used to compare field values to a list of values. For GraphQL, the list based operators are _in (in a list) and _nin (not in list). Whereas for the client SDKs, these operators are in and notIn, respectively.  The following are examples of using these operators on different types.  Example: Integer (Works with Double, Float, Numeric) Fetch a list of all pokemons with level either 1, 2 or 3: query { pokemons( where: { level: { _in: [1, 2, 3]}} ) @mongo { _id name } } Example: String or Text Fetch a list of all pokemons that are not of the following type - Water, Fire, Grass: query { pokemons( where: { name: { _nin: [\"Water\", \"Fire\", \"Grass\"]}} ) @mongo { _id name } }",
        "url": "https://docs.spaceuptech.com/storage/database/queries/filtering/#list-based-operators"   
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Queries",
        "page": "Filter query results",
        "heading": "Using multiple filters in the same query",
        "description": "You can group multiple parameters in the same where clause using the logical AND and OR operations. These logical operations can be infinitely nested to apply complex filters. Example: AND By default a logical AND operation is performed on all the conditions mentioned in the where clause. Let’s say we want to fetch all pokemons that are caught between two particular dates by Ash (trainer_id - 1). This is how you would do it: query { caught_pokemons(  where: { caught_on: {  _gte: \"2019-06-01\",  _lte: \"2019-09-15\"  }, trainer_id: \"1\"   }  ) @mongo { _id name } } Example: OR To perform a logical OR operation, we have to use the _or operator in GraphQL. Let’s say we want to fetch information of all Fire-type or Legendary pokemons. This is how you would do it: query {  pokemons(  where: { _or: [  {type: \"Fire\"},  {is_legendary: true} ] }  ) @mongo { _id name } }",
        "url": "https://docs.spaceuptech.com/storage/database/queries/filtering/#using-multiple-filters-in-the-same-query"   
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Queries",
        "page": "Filter query results",
        "heading": "Filter nested queries",
        "description": "The where argument can be used to filter even nested queries. Let’s say we want to fetch a list of all the trainers who have joined the game after a particular date along with their Fire-type pokemons. This is how you would do it: query {  trainers(  where: {joined_on: \"2019-09-15\"} ) @mongo { _id name caught_pokemons(  where: { trainer_id: \"trainers.id\" type: \"Fire\" } ) @mongo { _id name } } }",
        "url": "https://docs.spaceuptech.com/storage/database/queries/filtering/#filter-nested-queries"   
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Queries",
        "page": "Sort query results",
        "heading": "Sort query results",
        "description": "You can sort your query results via Space Cloud by using the sort argument. The sort argument can be used to sort nested queries too.The value of sort argument should be an array containing the name of fields to sort the results by. The default order of sorting for any field provided in the sort array is ascending. To specify descending order, just put a minus (-) sign before the field name.",
        "url": "https://docs.spaceuptech.com/storage/database/queries/sorting/"   
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Queries",
        "page": "Sort query results",
        "heading": "Sorting simple queries",
        "description": "Example: Sort all the trainers by their name: query { trainers( sort: [\"name\"] ) @mongo { id name } }",
        "url": "https://docs.spaceuptech.com/storage/database/queries/sorting/#sorting-simple-queries"   
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Queries",
        "page": "Sort query results",
        "heading": "Sorting nested queries",
        "description": "Example: Sort all the trainers by their name in ascending order and their pokemons by their combat_power in descending order: query { trainers( sort: [\"name\"] ) @mongo { id name pokemons( sort: [\"-combat_power] ) @mongo { name combat_power } } }",
        "url": "https://docs.spaceuptech.com/storage/database/queries/sorting/#sorting-nested-queries"   
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Queries",
        "page": "Sort query results",
        "heading": "Sorting by multiple fields",
        "description": "Example: Sort all caught pokemons first by their name in ascending order and then by their caught_on date in descending order: query { caught_pokemons( sort: [\"name\", \"-caught_on\"] ) @mongo { id name caught_on combat_power } }",
        "url": "https://docs.spaceuptech.com/storage/database/queries/sorting/#sorting-by-multiple-fields"   
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Queries",
        "page": "distinct query results",
        "heading": "distinct query results",
        "description": "You can fetch the distinct/unique values of a particular field via Space Cloud by using the distinct argument. Example: Get all the distinct pokemon types: query { pokemons(  distinct: \"type\" ) @mongo {  type } }",
        "url": "https://docs.spaceuptech.com/storage/database/queries/distinct/"   
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Queries",
        "page": "Paginate query results",
        "heading": "Paginate query results",
        "description": "The operators limit and skip are used for pagination. limit specifies the number of rows to retain from the result set and skip determines the number of objects to skip (i.e. the offset of the result) The following are examples of different pagination scenarios:",
        "url": "https://docs.spaceuptech.com/storage/database/queries/pagination/"   
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Queries",
        "page": "Paginate query results",
        "heading": "Limit results",
        "description": "Example: Fetch the first 5 trainers from the list of all trainers: query { trainers( limit: 5 ) @mongo { _id name } }",
        "url": "https://docs.spaceuptech.com/storage/database/queries/pagination/#limit-results"   
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Queries",
        "page": "Paginate query results",
        "heading": "Skip and limit results",
        "description": "Example: Fetch 5 trainers from the list of all trainers starting from the 6th one: query { trainers( skip: 5, limit: 5 ) @mongo { _id name } }",
        "url": "https://docs.spaceuptech.com/storage/database/queries/pagination/#skip-and-limit-results"   
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Queries",
        "page": "Paginate query results",
        "heading": "Skip and limit results on nested queries",
        "description": "Example: Fetch first 3 trainers and 2 pokemons of each trainer starting from the 6th one: query { trainers( limit: 3 ) @mongo { _id name pokemons( skip: 5, limit: 2 ) @mongo { name } } }",
        "url": "https://docs.spaceuptech.com/storage/database/queries/pagination/#skip-and-limit-results-on-nested-queries"   
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Queries",
        "page": "Using multiple operations",
        "heading": "Using multiple operations",
        "description": "Multiple operations can be used together in the same query. For example, you can filter the results, sort and limit them all in a single query. Example: Fetch a list of trainers and only their first two Water-type pokemons sorted by their name: query { trainers @mongo { _id name pokemons( where: {type: \"Water\"}, sort: {name: 1}, limit: 2 ) @mongo { id name } } }",
        "url": "https://docs.spaceuptech.com/storage/database/queries/multiple-operations/"   
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Queries",
        "page": "Multiple Queries",
        "heading": "Multiple Queries",
        "description": "With Space Cloud, you can make multiple queries even to different databases in a single request. If multiple queries are part of the same request, they get executed in parallel, and the individual responses are collated and returned. Note: This is only a GraphQL feature and not available in any client SDKs. Example: Fetch list of trainers (from PostgreSQL) and pokemons (from MongoDB): query { trainers @postgres { id name } pokemons @mongo { name type } }",
        "url": "https://docs.spaceuptech.com/storage/database/queries/multiple-queries/"   
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Queries",
        "page": "Joins / nested queries",
        "heading": "Joins / nested queries",
        "description": "You can join data from different data sources by making nested queries. Joins can be performed based on the relations described in your schema. These join work for any database even if it is not relational (e.g., MongoDB). Note: The joins capability is available only via GraphQL as of now. If you instead want to join data from our client SDKs or have some complex join operations, we recommend to make views on your tables and query them as regular tables.",
        "url": "https://docs.spaceuptech.com/storage/database/queries/joins/"   
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Queries",
        "page": "Joins / nested queries",
        "heading": "Same database joins",
        "description": "Example: Fetch a list of trainers along with their caught pokemons: To fetch trainers along with their pokemons, we first need to describe the relationship between trainer and pokemon using the @link directive: type trainer { id: ID! @primary name: String! pokemons: [pokemon] @link(table: \"pokemon\", from: \"id\", to: \"trainer_id\") } type pokemon { id: ID! @primary name: String! trainer_id: ID! @foreign(table: \"trainer\", field: \"id\") } Now, you can query a list of trainers along with their pokemons: query {  trainer @postgres { id name pokemons { name } } } The above GraphQL query joins the trainer and the pokemon table on the backend with the condition trainer.id == pokemon.trainer_id. Space Cloud derives this condition from the arguments (table, from and to) you provide to the @link directive.  Note: You can even sort and paginate the nested queries.",
        "url": "https://docs.spaceuptech.com/storage/database/queries/joins/#same-database-joins"   
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Queries",
        "page": "Joins / nested queries",
        "heading": "Performing joins on the fly",
        "description": "It’s not necessary to mention the @link directive to join data from two tables/sources. You can even perform joins directly by specifying the join condition on the frontend: query { trainer @postgres { id name pokemons (where: { trainer_id: \"trainer.id\" }) @mongo { name } } } If you would have noticed, you can access the parent query’s data in your nested query.  The where clause that you specify here trainer_id: trainer.id results into the same join operation on the backend as earlier with the condition trainer.id == pokemon.trainer_id. The only difference is that here we are specifying the condition in the query rather than the schema. In the above example, we used trainers._id in our nested query.  Note: The join operation is always performed on backend only irrespective of where you describe the relation.",
        "url": "https://docs.spaceuptech.com/storage/database/queries/joins/#performing-joins-on-the-fly"   
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Queries",
        "page": "Joins / nested queries",
        "heading": "Cross-database joins",
        "description": "Cross-database joins are used to join data from different databases. For instance, some of our data can be in MongoDB, and some can be in PostgreSQL, and you want to query them in a single request.  Example: Fetch a list of trainers along with their caught pokemons (trainers is in PostgreSQL and caught pokemons in MongoDB):  query { trainers @postgres { id name caught_pokemons(   where: {trainer_id: {_eq: \"trainers.id\"}} ) @mongo {   name } } }",
        "url": "https://docs.spaceuptech.com/storage/database/queries/joins/#cross-database-joins"   
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Mutations",
        "page": "Mutations",
        "heading": "Mutations",
        "description": "Mutations are used to modify data on the server (i.e. write, update or delete data). Space Cloud parses the mutation request (GraphQL or JSON) and executes native database queries as per the request. The following types of mutation requests are possible:  Insert Update Upsert Delete Transactions",
        "url": "https://docs.spaceuptech.com/storage/database/mutations/"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Mutations",
        "page": "Insert",
        "heading": "Insert",
        "description": "An insert request only requires the docs argument, which is nothing but the array of objects to be inserted.",
        "url": "https://docs.spaceuptech.com/storage/database/mutations/insert/"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Mutations",
        "page": "Insert",
        "heading": "Insert a single object",
        "description": "Example: Let’s say you have caught a Pikachu! This is how you would add it to your list of caught pokemons: mutation { insert_caught_pokemons( docs: [ {id: \"1\", name: \"Pikachu\", combat_power: 500} ] ) @postgres { status error returning { id name } } } The result of the above mutation is as follows: { \"data\": { \"insert_caught_pokemons\": { \"returning\": [ { \"id\": \"1\", \"name\": \"Pikachu\" } ], \"status\": 200 } } }",
        "url": "https://docs.spaceuptech.com/storage/database/mutations/insert/#insert-a-single-object"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Mutations",
        "page": "Insert",
        "heading": "Insert multiple objects of the same type in the same mutation",
        "description": "Example: Add 3 items received from Professor Oak to your list of items: mutation { insert_items( docs: [ {id: \"1\", type: \"Pokeball\"}, {id: \"2\", type: \"Potion\"}, {id: \"3\", type: \"Antidote\"} ] ) @postgres { status error returning { id type } } }",
        "url": "https://docs.spaceuptech.com/storage/database/mutations/insert/#insert-multiple-objects-of-the-same-type-in-the-same-mutation"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Mutations",
        "page": "Insert",
        "heading": "Insert an object along with its related objects through relationships",
        "description": "Let’s say you have linked the pokemon table to the pokemons field of the trainer table via the @link directive. Then you can insert a trainer along with their pokemons: mutation { insert_trainer(  docs: [ { id: \"ash\",  name: \"Ash\",  city: \"Pallete Town\", pokemons: [ { id: \"1\", name: \"Pikachu\", combat_power: 200 }, { id: \"2\", name: \"Charmender\", combat_power: 150 } ] } ] ) @postgres { status error returning { id name city pokemons { id name combat_power } } } }",
        "url": "https://docs.spaceuptech.com/storage/database/mutations/insert/#insert-an-object-along-with-its-related-objects-through-relationships"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Mutations",
        "page": "Update",
        "heading": "Update",
        "description": "An update request consists of two parts - a where clause and update operators for new values. The where clause has the same filtering options as queries. Note: At least any one of the update operations is required to update the rows.",
        "url": "https://docs.spaceuptech.com/storage/database/mutations/update/"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Mutations",
        "page": "Update",
        "heading": "Update operations",
        "description": "You can perform different types of update operations like set, inc, push, etc. on your data. Following are the different types of update operations: ",
        "url": "https://docs.spaceuptech.com/storage/database/mutations/update/#update-operations"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Mutations",
        "page": "Update",
        "heading": "Set operation",
        "description": "set operator is used to set a field’s value with the given value. Example: Update the name of your pokemon: mutation { update_caught_pokemons( where: {id: {_eq: 1}}, set: {name: \"My Cool Pikachu\"} ) @postgres { status } }",
        "url": "https://docs.spaceuptech.com/storage/database/mutations/update/#set-operation"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Mutations",
        "page": "Update",
        "heading": "Increment operation",
        "description": "inc operator is used to increment/decrement a field’s value by the provided value. Example: Increment the combat power of your pokemon by 50: mutation { update_caught_pokemons( where: {id: 1}, inc: {combat_power: 50} ) @postgres { status } } Example: Decrement the hit points of your pokemon by 10: mutation { update_caught_pokemons( where: {id: 1}, inc: {hit_points: -10} ) @postgres { status } }",
        "url": "https://docs.spaceuptech.com/storage/database/mutations/update/#increment-operation"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Mutations",
        "page": "Update",
        "heading": "Multiply operation",
        "description": "mul operator multiplies a field’s value by the given value. Note: The multiplier can be float as well to achieve division. Example: Your pokemon has evolved, and you want to multiply its combat power by 2: mutation { update_caught_pokemons( where: {id: 1}, mul: {combat_power: 2} ) @postgres { status } }",
        "url": "https://docs.spaceuptech.com/storage/database/mutations/update/#multiply-operation"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Mutations",
        "page": "Update",
        "heading": "Min operation",
        "description": "min operator updates a field’s value with the least (minimum) value amongst the specified value and the current value. Example: Update the trainer’s lowest score after a battle: mutation { update_trainers( where: {id: 1}, min: {lowest_sore: 50} ) @postgres { status } } Note: In the above example, the lowest_score is updated, only if it’s current value is greater than 50.",
        "url": "https://docs.spaceuptech.com/storage/database/mutations/update/#min-operation"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Mutations",
        "page": "Update",
        "heading": "Max operation",
        "description": "max operator updates a field’s value with the maximum value amongst the specified value and the current value. Example: Update the trainer’s highest score after a battle: mutation { update_trainers( where: {id: 1}, max: {highest_score: 200} ) @postgres { status } } Note: In the above example the highest_score is updated, only if it’s current value is lesser than 200.",
        "url": "https://docs.spaceuptech.com/storage/database/mutations/update/#max-operation"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Mutations",
        "page": "Update",
        "heading": "Current date operation",
        "description": "currentDate operator updates a field’s value with the current date/timestamp value. Example: Update last_battled field of a pokemon to current date and last_modified field with the current timestamp: mutation { update_caught_pokemons( where: {id: 1}, currentDate: { last_battled: true, last_modified: { $type: \"timestamp\" } } ) @postgres { status } }",
        "url": "https://docs.spaceuptech.com/storage/database/mutations/update/#current-date-operation"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Mutations",
        "page": "Update",
        "heading": "Push operation",
        "description": "Note: This is only available for MongoDB. push operator can be used to push a given value to an array in a document.  Example: Push thunderbolt to your pokemon’s list of attacks: mutation { update_caught_pokemons( where: {_id: \"1\"}, push: {attacks: \"thunderbolt\"} ) @mongo { status } }",
        "url": "https://docs.spaceuptech.com/storage/database/mutations/update/#push-operation"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Mutations",
        "page": "Update",
        "heading": "Unset operation",
        "description": "Note: This is only available for MongoDB. unset operator deletes the value of a particular field.  Example: Delete is_favourite field from your pokemons:  mutation { update_caught_pokemons( where: {_id: \"1\"}, unset: {is_favourite: } ) @mongo { status } } Note: The specified value in the $unset expression does not impact the operation.",
        "url": "https://docs.spaceuptech.com/storage/database/mutations/update/#unset-operation"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Mutations",
        "page": "Update",
        "heading": "Rename operation",
        "description": "Note: This is only available for MongoDB. rename operator rename the field’s name.  Example: Rename is_favourite field to favourite: mutation { update_caught_pokemons( where: {_id: \"1\"}, rename: {is_favourite: \"favourite\"} ) @mongo { status } }",
        "url": "https://docs.spaceuptech.com/storage/database/mutations/update/#rename-operation"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Mutations",
        "page": "Upsert",
        "heading": "Upsert",
        "description": "Upsert is useful when it’s unclear whether the object to be updated is present or not. An upsert query works like a regular update query if any document matching the where clause exists. Otherwise, it acts as an insert query, i.e. it creates a new document with all the fields from the where clause and update operators.  Space Cloud performs all upsert operations with snapshot level isolations so that all upserts are race safe.  Example: Insert a pokemon or update it if it’s already present: mutation { update_pokemons( where: {_id: \"1\"}, set: { name: \"Pikachu\", type: \"Electric\" } op: upsert ) @mongo { status } }",
        "url": "https://docs.spaceuptech.com/storage/database/mutations/upsert/"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Mutations",
        "page": "Delete",
        "heading": "Delete",
        "description": "A delete request only requires a where clause to filter rows to be deleted. The where clause has the same filtering options as queries. Example: Delete all pokemons with combat_power lesser than 200: mutation { delete_caught_pokemons( where: { combat_power: {_lt: 200}} ) @postgres { status } }",
        "url": "https://docs.spaceuptech.com/storage/database/mutations/delete/"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Mutations",
        "page": "Transactions",
        "heading": "Transactions",
        "description": "You can perform multiple mutations in a single database transaction with automatic rollbacks in case of failures. (i.e. either all of them succeed or none) For example, let’s say you want to trade a pokemon, i.e. add a new pokemon to your list of pokemons and delete one from it simultaneously. This is how you would do it: mutation { insert_caught_pokemons( docs: [ {id: 5, name: \"Charizard\"} ] ) @postgres { status } delete_caught_pokemons( where: {id: 4} ) @postgres { status } }",
        "url": "https://docs.spaceuptech.com/storage/database/mutations/transactions/"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Subscriptions",
        "page": "Subscriptions",
        "heading": "Subscriptions",
        "description": "With Space Cloud, you can subscribe to realtime changes in your database.",
        "url": "https://docs.spaceuptech.com/storage/database/subscriptions/"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Subscriptions",
        "page": "Subscriptions",
        "heading": "How it works",
        "description": "Space Cloud allows you to subscribe to a particular result set in your database by specifying a where clause. So whenever anything within that result set changes, i.e. new documents are added/updated/deleted, you get notified. However, for efficient bandwidth utilization, Space Cloud doesn’t send the entire result set on every change. It only sends the changed document to the concerned clients. The client can choose whether or not to receive the initial documents in the result set at the time of subscribing.  Note: You can write a stateful link if you wish to maintain the entire result set while using any REST or GraphQL client libraries. However, if you are using one of the client SDKs of Space Cloud, you get the stateful link out of the box.",
        "url": "https://docs.spaceuptech.com/storage/database/subscriptions/"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Subscriptions",
        "page": "Subscriptions",
        "heading": "Architecture",
        "description": "To offload the database, Space Cloud does not rely on any CDC (Change Data Capture) mechanism. Space Cloud uses its in-built eventing system to guarantee that all changes irrespective of any network failures propagate to the clients over a bi-directional link in an orderly fashion. Isolating the database querying and the realtime module helps it scale the realtime piece independent of database. However, this poses some limitations which are acceptable for most applications.",
        "url": "https://docs.spaceuptech.com/storage/database/subscriptions/"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Subscriptions",
        "page": "Subscriptions",
        "heading": "Limitations",
        "description": "The table/collection should have a unique identity (primary key or a unique key) in its schema. All mutations (inserts, updates and deletes) have to take place via Space Cloud. All updates and deletes can be made on a single document only using the unique identity (primary/unique fields) in the where clause. Another request should not update the fields used in the where clause of liveQuery. Note: These limitations are only applicable if you intend to use the realtime functionality.",
        "url": "https://docs.spaceuptech.com/storage/database/subscriptions/"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Subscriptions",
        "page": "Live Query",
        "heading": "Live Query",
        "description": "Live Query",
        "url": "https://docs.spaceuptech.com/storage/database/subscriptions/live-query/"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Subscriptions",
        "page": "Live Query",
        "heading": "Live Query",
        "description": "When you make a live query request to Space Cloud, it first pushes down the initial data in the result set one by one. After that, it just notifies you of any changes that happen to your result set. Example: Live query to the list of pokemons caught by a trainer: subscription { caught_pokemons( where: {trainer_id: \"1\"} ) @mongo { type payload { name } find # Object containing the unique fields of the concerned document  } } Data pushed down in live query have the following fields:  type: The type of operation which has resulted in Space Cloud pushing down data. Possible values are - initial, insert, update, and delete. initial is only applicable when Space Cloud is pushing the initial data down. payload: The concerned document/object. null for delete operation. find: An object containing the unique fields of the document. time: The timestamp of the operation in milliseconds.",
        "url": "https://docs.spaceuptech.com/storage/database/subscriptions/live-query/#live-query"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Subscriptions",
        "page": "Live Query",
        "heading": "Subscribing to changes only",
        "description": "In case you are interested in only the changes and not the initial values, pass the options.skipInitial argument to the live query: subscription { caught_pokemons @mongo ( where: {trainer_id: $trainerId}, options: {skipInitial: true} ){ type payload { name } docId } }",
        "url": "https://docs.spaceuptech.com/storage/database/subscriptions/live-query/#subscribing-to-changes-only"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Subscriptions",
        "page": "Sample use cases",
        "heading": "Sample use cases",
        "description": "The following are a few use cases for using subscription: ",
        "url": "https://docs.spaceuptech.com/storage/database/subscriptions/use-cases/"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Subscriptions",
        "page": "Sample use cases",
        "heading": "Realtime chat app",
        "description": "If you want to build a realtime chat app, then you can use Space Cloud for various realtime features in your app like: Realtime stream of chat messages Online/offline status of a user Is typing indicator for a user Example: Subscribe to chat messages: subscription { messages ( where: {to: {_eq: \"user1\"}} ) @mongo { type payload { _id from to text  timestamp } docId } } Example: Subscribe to is_typing indicator and status of a user: subscription { users ( where: {_id: {_eq: \"user2\"}} ) @mongo { type payload { _id status is_typing } docId } }",
        "url": "https://docs.spaceuptech.com/storage/database/subscriptions/use-cases/#realtime-chat-app"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Subscriptions",
        "page": "Sample use cases",
        "heading": "Live score updates",
        "description": "Let’s say you want to display the score of a particular game in realtime without polling the database again and again. In this case, you can subscribe to the game score and get notified whenever it’s updated. subscription { games (  where: {_id: {_eq: \"1\"}} ) @mongo {  type  payload {  score  } } }",
        "url": "https://docs.spaceuptech.com/storage/database/subscriptions/use-cases/#live-score-updates"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Securing your APIs",
        "description": "The security rules for database access works to authorize client request for database operations. Authorization works on the operation level (create, read, update, delete) for each table / collection in the database. This means that you can have different rules for different operations. Note: All security rules for database have to be configured via Mission Control only. (Rules tab in Database section)  Here’s a sample snippet which shows the rules on the users collection in MongoDB. Operations create and read are allowed while update and delete are blocked:  { \"create\": { \"rule\": \"allow\" }, \"read\": { \"rule\": \"allow\" }, \"update\": { \"rule\": \"deny\" }, \"delete\": { \"rule\": \"deny\" } } An operation is denied if there no corresponding rule for it is configured via the Mission Control. This ensures that all the operations are secure by default.",
        "url": "https://docs.spaceuptech.com/storage/database/securing-apis/"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Features",
        "description": "With security rules for database you can: Allow / deny access to a collection. Allow a particular operation on a collection only if the user is authenticated. Allow a particular operation on a collection only if certain conditions are met (via JSON rules or custom logic).",
        "url": "https://docs.spaceuptech.com/storage/database/securing-apis/#features"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Popular use cases",
        "description": "Role based authentication (For example only allow admin to delete a project) Allow a user to be able to query only his / her own data. Allow users to read posts without signin but allow only signed in users to create a post. Protect certain private fields based on roles. Check if the request contains a certain field. The Instagram problem - Allow a user to view a profile only if it is public or if he is following them. Custom validation. All these problems can be solved by the authorization module of Space Cloud.",
        "url": "https://docs.spaceuptech.com/storage/database/securing-apis/#popular-use-cases"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Available variables",
        "description": "All CRUD requests contains following request variables which are availabe to you for matching any conditions: auth: The claims present in the JWT token. If you are using in-built user management service of Space Cloud, then the auth has id, name and role of the user. While making a custom service, you are free to choose the claims which go inside the JWT token and thus available in the auth variable.  find: Present when a where clause is supplied by the where method/argument (Follows the MongoDB query syntax).  update: Present for update operations. It contains all the update operations like set, push, etc. (Follows MongoDB DSL).  doc: Present for insert operation. (The document(s) to be inserted)  op: “one | all” Present for all operations. one for insertOne, findOne, updateOne and deleteOne operations  Note: These variables are accessible in the security rules under the args key.",
        "url": "https://docs.spaceuptech.com/storage/database/securing-apis/#available-variables"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Allow anonymous access",
        "description": "You can disable authentication and authorization for a particular operation on a table completely by using allow. The request is allowed to be made even if the JWT token is absent in the request. You might want to use this when you want your users to perform certain operation without signin (For example, read products table of an e-commerce app). Here’s how to give access to a particular operation using allow: { \"read\": { \"rule\": \"allow\" } }",
        "url": "https://docs.spaceuptech.com/storage/database/securing-apis/#allow-anonymous-access"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Deny access",
        "description": "This rule is to deny all incoming requests irrespective of any thing. It is especially useful to deny certain dangerous operations like delete while selectively allowing the other ones. (For example, deny access to delete products table). Here’s how to deny access to a particular operation using deny: { \"delete\": { \"rule\": \"deny\" } }",
        "url": "https://docs.spaceuptech.com/storage/database/securing-apis/#deny-access"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Allow only authenticated users",
        "description": "You can allow a certain operation on a table only if the user is authenticated. (For example, allow only logged in users to bookmark a product). This rule is used to allow the request only if a valid JWT token is found in the request. No checks are imposed beyond that. Basically it authorizes every request which has passed the authentication stage. Here’s how to allow a operation for authenticated users: { \"create\": { \"rule\": \"authenticated\" } }",
        "url": "https://docs.spaceuptech.com/storage/database/securing-apis/#allow-only-authenticated-users"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Allow operation on certain conditions",
        "description": "Many a times you might want a user to perform a particular operation only when certain conditions are met. For example, a user can edit a post only if it is uploaded by him. Another use case might be allowing a user to read a profile only if it is public or the user is following him (Instagram problem). Such conditions might require you to check the value of certain fields from the incoming request or from the database. Or it can be a custom validation altogether. The security rules in Space Cloud are made keeping this flexibility in mind.",
        "url": "https://docs.spaceuptech.com/storage/database/securing-apis/#allow-operation-on-certain-conditions"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Match incoming requests",
        "description": "This rule is used to allow a certain request only when a certain condition has been met and all the variables required for matching are present in the request itself. Each CRUD request contains certain variable (auth, find, update, doc, op) present in the args object. Generally this rule is used to match the input parameters (like the where clause or certain fields in the document to be inserted) with the auth object. It can also be used for role based authentication. The basic syntax looks like this:  { \"rule\": \"match\", \"eval\": \"== | != | > | >= | < | <= | in | notIn\", \"type\": \"string | number | bool\", \"f1\": \"< field1 >\", \"f2\": \"< field2 >\" } Example (make sure user can query only his todos):  { \"read\": { \"rule\": \"match\", \"eval\": \"==\", \"type\": \"string\", \"f1\": \"args.auth.id\", \"f2\": \"args.find.userId\" } } Example (Role based authentication - allow only admin to delete a project): { \"delete\": { \"rule\": \"match\", \"eval\": \"==\", \"type\": \"string\", \"f1\": \"args.auth.role\", \"f2\": \"admin\" } } Example (Role based authentication - allow admin/moderator to delete a project): { \"delete\": { \"rule\": \"match\", \"eval\": \"in\", \"type\": \"string\", \"f1\": \"args.auth.role\", \"f2\": [\"admin\", \"moderator\"] } } Example (Check if a field is present in the request): { \"read\": { \"rule\": \"match\", \"eval\": \"==\", \"type\": \"bool\", \"f1\": \"utils.exists(args.find.postId)\", \"f2\": true } } utils.exists is a utility function by the security rules which checks if a given field exists or not and returns true or false.",
        "url": "https://docs.spaceuptech.com/storage/database/securing-apis/#match-incoming-requests"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Remove fields from request/response",
        "description": "This rule is used to remove certain fields from request or response. This is specially helpful if you want to protect certain fields from some operation. Example: Protect the password field from being queried by removing it from the response:  { \"rule\": \"remove\", \"fields\": [\"res.password\"] } As yo can see the above rule instructs the Space Cloud to remove password field from the res (response) object.  Note: Even if the response is an array of objects, the above rule will still work and will remove the password field fom each object in the response array.  In order to remove fields from the request, you have the args object.  Example: Prevent the role from being updated in a mutation by removing the role field from the mutation request:  { \"rule\": \"remove\", \"fields\": [\"args.update.$set.role\"] }",
        "url": "https://docs.spaceuptech.com/storage/database/securing-apis/#remove-fields-from-request/response"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Force certain fields",
        "description": "This rule is used to [override request/response] by forcing the value of certain fields in the request or response. Example: Allow the user to query only his todos by enforcing the id from the JWT token as the userId in the where clause:  { \"rule\": \"force\", \"field\": \"args.find.userId\", \"value\": \"args.auth.id\" } The above rule sets the value of args.find.userId (args.find is the where clause sent to the database) with the value of args.auth.id (auth object contains the token claims) before the request is sent to the database.",
        "url": "https://docs.spaceuptech.com/storage/database/securing-apis/#force-certain-fields"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Database Query",
        "description": "This rule is used to allow a certain request only if a database request returns successfully. The query’s find clause is generated dynamically using this rule. The query is considered to be successful if even a single row is successfully returned. The basic syntax looks like this: { \"rule\": \"query\", \"db\": \"mongo | sql-mysql | sql-postgres\", \"col\": \"< collection-name >\", \"find\": \"< mongo-find-query >\" } The query rule executes a database query with the user defined find object with operation type set to one. It is useful for policies which depend on the values stored in the database. Example (make sure user can query only public profiles): { \"read\": { \"rule\": \"query\", \"db\": \"mongo\", \"col\": \"profiles\", \"find\": { \"userId\": \"args.find.userId\", \"isPublic\": true } } }",
        "url": "https://docs.spaceuptech.com/storage/database/securing-apis/#database-query"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Combine multiple conditions",
        "description": "You can mix and match several match and query rules together to tackle complex authorization tasks (like the Instagram problem) using the and and or rule. The basic syntax looks like this:  { \"rule\": \"and | or\", \"clauses\": \"< array-of-rules >\" } Example (The Instagram problem - Make sure the user can query a profile only if it’s public or he is a follower)  { \"rule\": \"or\", \"clauses\": [ { \"rule\": \"query\", \"db\": \"mongo\", \"col\": \"profiles\", \"find\": {  \"userId\": \"args.find.userId\",  \"isPublic\": true } }, { \"rule\": \"query\", \"db\": \"mongo\", \"col\": \"profiles\", \"find\": {  \"followers\": { \"$in\": \"args.auth.userId\"  } } } ] }",
        "url": "https://docs.spaceuptech.com/storage/database/securing-apis/#combine-multiple-conditions"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Custom validations",
        "description": "In case where the matching and db query for validating conditions are not enough, Space Cloud can use your custom authorization logic by triggering a webhook on your servers. Here’s an example showing how to do this by rule webhook: { \"rule\": \"webhook\", \"url\": \"http://localhost:8080/my-custom-logic\" } In the above case, Space Cloud will make a POST request to your remote server on the above url. If the remote server returns a status of 2XX, the request will be considered authenticated. Otherwise, Space Cloud will consider the request as unauthorized. The webhook body will consist of the same variables that were available under the args key in security rules.  End to end user authentication  As the name suggests, we authenticate the end user in this form of authentication. This is essential if you need to verify or restrict requests from authorized users only.  Space Cloud transparently forwards the token provided by the user in the Authorization header. This token is signed with the secret key provided in the project’s configuration.  Service to service authentication  In some cases, you would want to verify the sender of the request received by your service. This is required when your service is running in an open or untrusted network.  Space cloud adds a X-SC-Token header which contains a token containing the identity of the caller space cloud instance. This token can be used to check if the incoming request is coming from an authentic source. This token is signed with the secret key provided in the project’s configuration.",
        "url": "https://docs.spaceuptech.com/storage/database/securing-apis/#custom-validations"
    },
    {
        "index": "Storage",
        "title": "Database",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Next steps",
        "description": "Great! You have learned how to secure database access. You may now checkout the security rules for file storage module.",
        "url": "https://docs.spaceuptech.com/storage/database/securing-apis/#next-steps"
    },
    {
        "index": "Storage",
        "title": "File Storage",
        "sub_title": "File Storage",
        "page": "File Storage",
        "heading": "File Storage",
        "description": "The file storage module allows you to manage files in your app on a scalable file storage technology (e.g., Amazon S3) without having to write any backend code.",
        "url": "https://docs.spaceuptech.com/storage/filestore/"
    },
    {
        "index": "Storage",
        "title": "File Storage",
        "sub_title": "File Storage",
        "page": "File Storage",
        "heading": "Features",
        "description": "Create a folder Upload/download a file List all files/folders within a folder Delete a file/folder",
        "url": "https://docs.spaceuptech.com/storage/filestore/"
    },
    {
        "index": "Storage",
        "title": "File Storage",
        "sub_title": "File Storage",
        "page": "File Storage",
        "heading": "Use cases",
        "description": "Making a file management app (eg: Google Drive) File sharing in any social media app (eg: Facebook, Instagram) Pictures for product catalogues in e-commerce apps (e.g., Amazon)",
        "url": "https://docs.spaceuptech.com/storage/filestore/"
    },
    {
        "index": "Storage",
        "title": "File Storage",
        "sub_title": "File Storage",
        "page": "File Storage",
        "heading": "Supported file storage technologies",
        "description": "You can select one of the following storage technologies for your project in Space Cloud: Amazon S3 Google Cloud Storage Local file system",
        "url": "https://docs.spaceuptech.com/storage/filestore/"
    },
    {
        "index": "Storage",
        "title": "File Storage",
        "sub_title": "File Storage",
        "page": "File Storage",
        "heading": "Configuring file storage module",
        "description": "Open your project in Mission Control and head to the File Storage section. Enable the file storage module.  Select an appropriate file storage technology for your project. The default is Local File Storage.  Then copy-paste the connection string of the selected file storage and hit Save.  This connection string is used by Space Cloud to connect to the selected file storage. In the case of Local File Storage, connection string is the path of the folder where you want to store all your files.  Note: Before you can use the file storage module from the frontend, you need to add security rules too.",
        "url": "https://docs.spaceuptech.com/storage/filestore/"
    },
    {
        "index": "Storage",
        "title": "File Storage",
        "sub_title": "File Storage",
        "page": "File Storage",
        "heading": "How it works",
        "description": "The file storage module provides REST APIs for file management. Whenever the client requests any file operation (e.g., upload), Space Cloud validates whether the request is authorized by applying the security rules provided in the Mission Control. If the request is authorized, Space Cloud makes a corresponding request to the selected file storage technology and returns the result to the client. Else it returns a 401 or 403 error to the client.",
        "url": "https://docs.spaceuptech.com/storage/filestore/"
    },
    {
        "index": "Storage",
        "title": "File Storage",
        "sub_title": "Upload file",
        "page": "Upload file",
        "heading": "Upload file",
        "description": "Here’s how you can upload a file by simply calling uploadFile function on your frontend: import { API } from \"space-api\";  // Initialize api with the project name and url of the space cloud const api = new API(\"todo_app\", \"http://localhost:4122\");  // Get the file to be uploaded const myFile = document.querySelector(\"#your-file-input\").files[0];  // Upload the file api.FileStore().uploadFile(\"<destination-path>\", myFile, \"profile.jpg\") .then(res => { if (res.status === 200) { // File uploaded successfully } // Error uploading file }) .catch(ex => { // Exception occured while processing request }); As you can see, the uploadFile function takes 3 parameters: path - The path at which the file needs to be uploaded file - A file of the type HTML5 File API name - Name of the file The path can be nested as well. For example, a path - /folder1/folder2 would mean to upload the file inside folder2 which is in folder1. If any of the folders mentioned in the path were not present, they would get created before uploading the file.",
        "url": "https://docs.spaceuptech.com/storage/filestore/upload-file/"
    },
    {
        "index": "Storage",
        "title": "File Storage",
        "sub_title": "Upload file",
        "page": "Upload file",
        "heading": "Response",
        "description": "A response object sent by the server contains the status fields explained below: status: Number describing the status of the upload operation. Following values are possible:  200 - Successful upload 401 - Request was unauthenticated 403 - Request was unauthorized 500 - Internal server error",
        "url": "https://docs.spaceuptech.com/storage/filestore/upload-file/"
    },
    {
        "index": "Storage",
        "title": "File Storage",
        "sub_title": "Download file",
        "page": "Download file",
        "heading": "Download file",
        "description": "All files uploaded via File Management module are accessible on the following url: url = `$SPACE_CLOUD_ADDRESS/v1/api/$projectID/files/$path/$fileName` The URL is different for each file and has the following variable parts to it:  $projectID - This is the project id with which you initialized the API $path - The path at which you have uploaded the file $fileName - The name with which you have uploaded the file (e.g., profile.jpg)",
        "url": "https://docs.spaceuptech.com/storage/filestore/download-file/"
    },
    {
        "index": "Storage",
        "title": "File Storage",
        "sub_title": "Create folder",
        "page": "Create folder",
        "heading": "Create folder",
        "description": "You can easily allow users to create a folder via the File Management module of Space Cloud by calling createFolder on frontend. Here’s a code snippet to do so: import { API } from \"space-api\";  // Initialize api with the project name and url of the space cloud const api = new API(\"todo_app\", \"http://localhost:4122\");  // Create a folder api.FileStore().createFolder(\"/some-path\", \"some-folder\") .then(res => { if (res.status === 200) { // Folder created successfully } // Error creating folder }) .catch(ex => { // Exception occured while processing request }); The createFolder function takes two parameters and creates a folder. The two parameters are as follows:  path: The path at which to create the folder. name: The name of the folder. The path can be nested as well. For example, a path - /folder1/folder2 would mean to create the folder inside folder2 which is in folder1. If any of the folders mentioned in the path were not present, they would get created before creating the specified folder.",
        "url": "https://docs.spaceuptech.com/storage/filestore/create-folder/"
    },
    {
        "index": "Storage",
        "title": "File Storage",
        "sub_title": "Create folder",
        "page": "Create folder",
        "heading": "Response",
        "description": "A response object sent by the server contains the status fields explained below: status: Number describing the status of the upload operation. Following values are possible:  200 - Successful creation of folder 401 - Request was unauthenticated 403 - Request was unauthorized 500 - Internal server error",
        "url": "https://docs.spaceuptech.com/storage/filestore/create-folder/"
    },
    {
        "index": "Storage",
        "title": "File Storage",
        "sub_title": "List files/folders",
        "page": "List files/folders",
        "heading": "List files/folders",
        "description": "You can list all files and folders within a specific folder by simply calling listFiles on the frontend. Here’s a code snippet that shows how to do it: import { API } from \"space-api\";  // Initialize api with the project name and url of the space cloud const api = new API(\"todo_app\", \"http://localhost:4122\");  // Upload the file api.FileStore().listFiles(\"/some-path\") .then(res => { if (res.status === 200) { // res.data.result contains list of files / folders console.log(\"Files: \", res.data.result) } // Error fetching list of files }) .catch(ex => { // Exception occured while processing request }); As shown above, the listFiles function takes a single parameter path and lists all the files/folders located at that path.      The path can be nested as well. For example, if you give a path - /folder1/folder2, then listFiles method returns all the files/folders located in folder2, which are in folder1.",
        "url": "https://docs.spaceuptech.com/storage/filestore/list-files/"
    },
    {
        "index": "Storage",
        "title": "File Storage",
        "sub_title": "List files/folders",
        "page": "List files/folders",
        "heading": "Response",
        "description": "The response object sent by server looks something like this: { \"status\": 200, \"data\": { \"result\": [ {  \"name\": \"Folder 1\", \"type\": \"dir\" }, {  \"name\": \"file1.jpg\", \"type\": \"file\" }, {  \"name\": \"file2.txt\", \"type\": \"file\" } ] } } Here name is the name of the folder/file and type describes whether the item is a file or directory.  A response object sent by the server contains the status and data fields explained below:  Possible values for status:  200 - Successfully fetched list of files/folders 401 - Request was unauthenticated 403 - Request was unauthorized 404 - Path does not exist 500 - Internal server error",
        "url": "https://docs.spaceuptech.com/storage/filestore/list-files/"
    },
    {
        "index": "Storage",
        "title": "File Storage",
        "sub_title": "Delete file/folder",
        "page":  "Delete file/folder",
        "heading": "Delete file/folder",
        "description": "You can easily allow users to delete a file or folder via the File Management module of Space Cloud by calling a simple function, as shown below: import { API } from \"space-api\";  // Initialize api with the project name and url of the space cloud const api = new API(\"todo_app\", \"http://localhost:4122\");  // Delete a file api.FileStore().delete(\"/some-path/some-file\") .then(res => { if (res.status === 200) { // File deleted successfully } // Error deleting file }) .catch(ex => { // Exception occured while processing request }); The delete function takes a path of the file or folder you want to delete.  The delete function recursively deletes all files/folders in a folder if the path was for a folder. The path can be nested as well. For e.g a path - /folder1/folder2/file1 would mean to delete the file - file1 inside folder2 which is in folder1.",
        "url": "https://docs.spaceuptech.com/storage/filestore/delete/"
    },
    {
        "index": "Storage",
        "title": "File Storage",
        "sub_title": "Delete file/folder",
        "page":  "Delete file/folder",
        "heading": "Response",
        "description": "A response object sent by the server contains the status fields explained below: status: Number describing the status of the upload operation. Following values are possible:  200 - Successfully deleted file/folder 401 - Request was unauthenticated 403 - Request was unauthorized 500 - Internal server error",
        "url": "https://docs.spaceuptech.com/storage/filestore/delete/"
    },
    {
        "index": "Storage",
        "title": "File Storage",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Securing your APIs",
        "description": "The security rules for file storage access works to authorize client request. Authorization works on the operation level (read, create and delete) for each path prefix. This means that you can have different rules for different path prefixes. Here’s a sample snippet which shows the rules on the /images/:userId prefix. Operations create and read are allowed while delete is blocked. { \"prefix\": \"/images/:userId\", \"rule\": { \"create\": { \"rule\": \"allow\" }, \"read\": { \"rule\": \"allow\" }, \"delete\": { \"rule\": \"deny\" } } }",
        "url": "https://docs.spaceuptech.com/storage/filestore/securing-apis/"
    },
    {
        "index": "Storage",
        "title": "File Storage",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Points to note",
        "description": "The following needs to be kept in mind for the security rules in the file storage module. The rules is a map of rules. The key (imageRule in this case) is just a unique key to indentify each rule. Using the allow rule will instruct Space Cloud to disable JWT token parsing for that function. This means the auth parameter in the function will always be a null value when the rule is set to allow. All rules are applied on a prefix. A prefix is nothing but the path prefix where the file / folder is present or is to be created The prefix may contain path parameters (/:userId in this case). The value of the path parameter is available in the args.params object. The key would be userId and the value would be the actual value in the path provided.",
        "url": "https://docs.spaceuptech.com/storage/filestore/securing-apis/#points-to-note"
    },
    {
        "index": "Storage",
        "title": "File Storage",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Features",
        "description": "With security rules for file storage you can: Allow / deny access to a file/folder Allow access to a particular file/folder only if the user is authenticated Allow access to a particular file/folder only if certain conditions are met (via JSON rules or custom logic).",
        "url": "https://docs.spaceuptech.com/storage/filestore/securing-apis/#features"
    },
    {
        "index": "Storage",
        "title": "File Storage",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Popular use cases",
        "description": "Allow only signed in users to upload a file. Role based authentication (For example only allow admin to delete a particular folder) Allow user to upload a file at his path only. The Instagram problem - Allow user to view a profile pic only if the profile is public or they are following them Call another function to authorize the file/folder access All these problems can be solved by the security module of Space Cloud.",
        "url": "https://docs.spaceuptech.com/storage/filestore/securing-apis/#popular-use-cases"
    },
    {
        "index": "Storage",
        "title": "File Storage",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Available variables",
        "description": "All requests for file/folder access contains 2 variables which are availabe to you for matching conditions: auth: The claims present in the JWT token. If you are using in-built user management service of Space Cloud, then the auth has id, name and role of the user. While making a custom service, you are free to choose the claims which go inside the JWT token and thus available in the auth variable. params: The variables in the path prefix.",
        "url": "https://docs.spaceuptech.com/storage/filestore/securing-apis/#available-variables"
    },
    {
        "index": "Storage",
        "title": "File Storage",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Allow anonymous access",
        "description": "You can disable authentication and authorization for a particular file/folder completely by using allow. The request is allowed to be made even if the JWT token is absent in the request. You might want to use this when you want some files to be publicly available to all users even without signin (For example, access images of products in an e-commerce app). Here’s how to give access to a particular path using allow: { \"read\": { \"rule\": \"alow\" } }",
        "url": "https://docs.spaceuptech.com/storage/filestore/securing-apis/#allow-anonymous-access"
    },
    {
        "index": "Storage",
        "title": "File Storage",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Deny access",
        "description": "This rule is to deny all incoming requests irrespective of any thing. It is especially useful to deny certain dangerous operations like delete while selectively allowing the other ones. (For example, deny access to delete product’s image). Here’s how to deny access to a particular operation using deny: { \"delete\": { \"rule\": \"deny\" } }",
        "url": "https://docs.spaceuptech.com/storage/filestore/securing-apis/#deny-access"
    },
    {
        "index": "Storage",
        "title": "File Storage",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Allow only authenticated users",
        "description": "You can allow access to a certain path only if the user is authenticated. This rule is used to allow the request only if a valid JWT token is found in the request. No checks are imposed beyond that. Basically it authorizes every request which has passed the authentication stage. Here’s how to allow a operation for authenticated users: { \"create\": { \"rule\": \"authenticated\" } }",
        "url": "https://docs.spaceuptech.com/storage/filestore/securing-apis/#allow-only-authenticated-users"
    },
    {
        "index": "Storage",
        "title": "File Storage",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Allow operation on certain conditions",
        "description": "Many a times you might want a user to access a file path only when certain conditions are met. For example, a user can delete a picture only if it is uploaded by him. Another use case might be allowing a user to read a profile’s image only if that profile is public or the user is following him (Instagram problem). Such conditions might require you to check the value of certain fields from the incoming request or from the database. Or it can be a custom validation altogether. The security rules in Space Cloud are made keeping this flexibility in mind.",
        "url": "https://docs.spaceuptech.com/storage/filestore/securing-apis/#allow-operation-on-certain-conditions"
    },
    {
        "index": "Storage",
        "title": "File Storage",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Match incoming requests",
        "description": "This rule is used to allow a certain request only when a certain condition has been met and all the variables required for matching is present in the request itself. Each file access request contains 2 variables (auth and params) present in the args object. Generally this rule is used to match the path parameters with the auth object. It can also be used for role based authentication. The basic syntax looks like this: { \"rule\": \"match\", \"eval\": \"== | != | > | >= | < | <= | in | notIn\", \"type\": \"string | number | bool\", \"f1\": \"< field1 >\", \"f2\": \"< field2 >\" } Example (Make sure user can upload a file at his path only):  { \"prefix\": \"/users/:userId\", \"rule\": { \"create\": { \"rule\": \"match\", \"eval\": \"==\", \"type\": \"string\", \"f1\": \"args.params.userId\", \"f2\": \"args.auth.id\" } } } Example (Role based authentication - allow only admin to delete a folder):  { \"prefix\": \"/projects/:projectId\", \"rule\": { \"delete\": { \"rule\": \"match\", \"eval\": \"==\", \"type\": \"string\", \"f1\": \"args.auth.role\", \"f2\": \"admin\" } } }",
        "url": "https://docs.spaceuptech.com/storage/filestore/securing-apis/#match-incoming-requests"
    },
    {
        "index": "Storage",
        "title": "File Storage",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Database Query",
        "description": "This rule is used to allow a certain request only if a database request returns successfully. The query’s find clause is generated dynamically using this rule. The query is considered to be successful if even a single row is successfully returned. The basic syntax looks like this:  { \"rule\": \"query\", \"db\": \"mongo | sql-mysql | sql-postgres\", \"col\": \"< collection-name >\", \"find\": \"< mongo-find-query >\" } The query rule executes a database query with the user defined find object with operation type set to one. It is useful for policies which depend on the values stored in the database.  Example (make sure user can query images of only public profiles):  { \"prefix\": \"/profiles/:profileId\", \"rule\":  \"read\": { \"rule\": \"query\", \"db\": \"mongo\", \"col\": \"profiles\", \"find\": { \"userId\": \"args.params.profileId\", \"isPublic\": true } } } }",
        "url": "https://docs.spaceuptech.com/storage/filestore/securing-apis/#database-query"
    },
    {
        "index": "Storage",
        "title": "File Storage",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Combine multiple conditions",
        "description": "You can mix and match several match and query rules together to tackle complex authorization tasks (like the Instagram problem) using the and and or rule. The basic syntax looks like this:  { \"rule\": \"and | or\", \"clauses\": \"< array-of-rules >\" } Example (The Instagram problem - Make sure the user can view a profile picture if the profile is public or he is a follower)  { \"prefix\": \"/profiles/:profileId\", \"rule\": { \"read\": { \"rule\": \"or\", \"clauses\": [ { \"rule\": \"query\", \"db\": \"mongo\", \"col\": \"profiles\", \"find\": { \"userId\": \"args.params.profileId\", \"isPublic\": true } }, { \"rule\": \"query\", \"db\": \"mongo\", \"col\": \"profiles\", \"find\": { \"followers\": { \"$in\": \"args.auth.userId\" } } } } } }",
        "url": "https://docs.spaceuptech.com/storage/filestore/securing-apis/#combine-multiple-conditions"
    },
    {
        "index": "Storage",
        "title": "File Storage",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Custom validations",
        "description": "In case where the matching and db query for validating conditions are not enough, Space Cloud can use your custom authorization logic by triggering a webhook on your servers. Here’s an example showing how to do this by rule webhook: { \"prefix\": \"/profiles/:profileId\", \"read\": { \"rule\": \"webhook\", \"url\": \"http://localhost:8080/my-custom-logic\" } } In the above case, Space Cloud will make a POST request to your remote server on the above url. If the remote server returns a status of 2XX, the request will be considered authenticated. Otherwise, Space Cloud will consider the request as unauthorized. The webhook body will consist of the same variables that were available under the args key in security rules.  End to end user authentication  As the name suggests, we authenticate the end user in this form of authentication. This is essential if you need to verify or restrict requests from authorized users only.  Space Cloud transparently forwards the token provided by the user in the Authorization header. This token is signed with the secret key provided in the project’s configuration.  Service to service authentication  In some cases, you would want to verify the sender of the request received by your service. This is required when your service is running in an open or untrusted network.  Space cloud adds a X-SC-Token header which contains a token containing the identity of the caller space cloud instance. This token can be used to check if the incoming request is coming from an authentic source. This token is signed with the secret key provided in the project’s configuration.",
        "url": "https://docs.spaceuptech.com/storage/filestore/securing-apis/#custom-validations"
    },
    {
        "index": "Storage",
        "title": "File Storage",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Next steps",
        "description": "Great! You have learned how to secure file access. You may now checkout the security rules for remote services.",
        "url": "https://docs.spaceuptech.com/storage/filestore/securing-apis/#next-steps"
    },
    {
        "index": "Microservices",
        "title": "Microservices",
        "sub_title": "Microservices",
        "page": "Microservices",
        "heading": "Microservices",
        "description": "This section covers the following features of Space Cloud: GraphQL API for Services: Create instant GraphQL APIs for all your Restful APIs. Eventing Module: Trigger webhooks based on Database, File storage and custom events. Deployments: Deploy, scale and secure dockerized workloads on any Kubernetes cluster. Secrets: Store and manage sensitive information, such as passwords, tokens, etc. for your deployments. Routing: Expose your deployments to the external world using flexible routing rules.",
        "url": "https://docs.spaceuptech.com/microservices/"
    },
    {
        "index": "Microservices",
        "title": "GraphQL APIs",
        "sub_title": "GraphQL APIs",
        "page": "GraphQL APIs",
        "heading": "GraphQL APIs",
        "description": "Space Cloud provides realtime CRUD and file storage APIs for various data stores with authorization and access controls. However, in many cases, you would need to write some backend code for custom business logic. (example: integrating third-party APIs like payment gateways) GraphQL APIs for microservices brings your restful APIs to Space Cloud’s GraphQL layer in minutes.  Space Cloud can trigger your remote HTTP services and provide a unified GraphQL API layer for your app. All you need to do is write an HTTP service and provide its URL and endpoints to Space Cloud. You can write these services in any language or framework. Space Cloud even lets you perform joins on your database and remote services via GraphQL.  This is what Space Cloud running with “Remote Services” looks like:",
        "url": "https://docs.spaceuptech.com/microservices/graphql/"
    },
    {
        "index": "Microservices",
        "title": "GraphQL APIs",
        "sub_title": "GraphQL APIs",
        "page": "GraphQL APIs",
        "heading": "Use cases",
        "description": "You should use Remote Services when you want to synchronously trigger certain business logic. Note: If you want to trigger asynchronous business logic in the background, then you should see the Eventing Module.  Following are a few use cases of Remote Services:  Custom business logic. Third-party integrations (e.g., Firebase Auth, Mailchimp, Stripe). Extending support for data stores which Space Cloud doesn’t support yet.",
        "url": "https://docs.spaceuptech.com/microservices/graphql/"
    },
    {
        "index": "Microservices",
        "title": "GraphQL APIs",
        "sub_title": "GraphQL APIs",
        "page": "GraphQL APIs",
        "heading": "How it works",
        "description": "You write a custom HTTP service in any language or framework. Then, you register this Restful APIs to Space Cloud via Mission Control with a unique service name. Each service has an URL and can have multiple endpoints (each with a unique endpoint name within that service, an endpoint path and HTTP method). These services can be deployed anywhere as long as Space Cloud can reach them. Your frontend can query these services now via the unified APIs of Space Cloud. The frontend mentions a service name and endpoint name along with optional parameters. When Space Cloud gets a request for a remote service from the frontend, it makes an HTTP request to the corresponding remote endpoint (service URL + endpoint path) with a body containing the parameters sent by the frontend.",
        "url": "https://docs.spaceuptech.com/microservices/graphql/"
    },
    {
        "index": "Microservices",
        "title": "GraphQL APIs",
        "sub_title": "Rest to GraphQL in minutes",
        "page": "Rest to GraphQL in minutes",
        "heading": "Rest to GraphQL in minutes",
        "description": "Space Cloud has native support to convert your Restful APIs to GraphQL without having to write any code whatsoever. Follow the Space Cloud Basic guide to see the power of GraphQL for yourself!  Next steps  Learn how to Secure your GraphQL APIs Connect serverless functions to GraphQL (Coming soon)",
        "url": "https://docs.spaceuptech.com/microservices/graphql/rest-to-graphql/"
    },
    {
        "index": "Microservices",
        "title": "GraphQL APIs",
        "sub_title": "Register a service",
        "page": "Register a service",
        "heading": "Register a service",
        "description": "Follow the steps below to register a service with Space Cloud:",
        "url": "https://docs.spaceuptech.com/microservices/graphql/register-service/"
    },
    {
        "index": "Microservices",
        "title": "GraphQL APIs",
        "sub_title": "Register a service",
        "page": "Register a service",
        "heading": "Step 1: Write a custom HTTP server",
        "description": "You first need to create your custom HTTP server and deploy it. You can write this server in any language or framework of your choice. Note: The custom logic that you want to access via Space Cloud should only go in POST handlers.",
        "url": "https://docs.spaceuptech.com/microservices/graphql/register-service/#step-1-write-a-custom-http-server"
    },
    {
        "index": "Microservices",
        "title": "GraphQL APIs",
        "sub_title": "Register a service",
        "page": "Register a service",
        "heading": "Step 2: Add remote service",
        "description": "Head to the Remote Services section in Mission Control. Click on the Add button to open the following form:  Add service screen You need to enter the following information: Service name: Used in your frontend queries to uniquely identify a service. This name should be unique within a project. Remote URL: The URL of your remote service. Click on the Add button to add the remote service.  Once you have added the remote service, you should be able to see it in the remote services table:  Services table",
        "url": "https://docs.spaceuptech.com/microservices/graphql/register-service/#step-2-add-remote-service"
    },
    {
        "index": "Microservices",
        "title": "GraphQL APIs",
        "sub_title": "Register a service",
        "page": "Register a service",
        "heading": "Step 3: Add endpoint to your remote service",
        "description": "Click on the View button in the Actions column to open the service page. Click on the Add button to add an endpoint to your remote service:  Add endpoint screen   You need to enter the following information:  Name: Used in your frontend queries along with the service name to uniquely identify an endpoint. This name should be unique within a service. Method: The HTTP method for your endpoint. Path: Endpoint for your custom logic. Space Cloud makes an HTTP request of the specified method to the endpoint formed by Service URL + Path. Note: You can also use arguments to make the path dynamic. For example, a path - /hello/{args.name} will receive the name URL param from the arguments sent by the client in the query.  Rules: These are the security rules for your endpoint. Read more about security here.",
        "url": "https://docs.spaceuptech.com/microservices/graphql/register-service/#step-3-add-endpoint-to-your-remote-service"
    },
    {
        "index": "Microservices",
        "title": "GraphQL APIs",
        "sub_title": "Quering a service",
        "page": "Quering a service",
        "heading": "Quering a service",
        "description": "Once you have added a remote service, you can access it via the GraphQL and REST APIs of Space Cloud.",
        "url": "https://docs.spaceuptech.com/microservices/graphql/querying/"
    },
    {
        "index": "Microservices",
        "title": "GraphQL APIs",
        "sub_title": "Quering a service",
        "page": "Quering a service",
        "heading": "Querying static endpoints",
        "description": "Here’s how you can access a remote endpoint named adder of a service named arithmetic from your frontend: query {adder( num1: 10, num2: 20) @arithmetic { sum} } That’s it! The arguments sent by the client (num1 and num2 in this case) are available to the remote service in the request body as well as URL params. You can pass any number of arguments to the remote endpoint.",
        "url": "https://docs.spaceuptech.com/microservices/graphql/querying/#querying-static-endpoints"
    },
    {
        "index": "Microservices",
        "title": "GraphQL APIs",
        "sub_title": "Quering a service",
        "page": "Quering a service",
        "heading": "Querying dynamic endpoints",
        "description": "Let’s say you have added an endpoint hello in greeting service which accepts path parameters like these: /hello/{args.name} Then you can query this service in the following manner: query { hello( name: \"John\" ) @greeting { sum } }",
        "url": "https://docs.spaceuptech.com/microservices/graphql/querying/#querying-dynamic-endpoints"
    },
    {
        "index": "Microservices",
        "title": "GraphQL APIs",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Securing your APIs",
        "description": "The security rules for remote services works to authorize client request for remote services. Authorization works on the endpoint level of each service. This means that you can have different rules for each endpoint in a service. Add endpoint screen  See the Rule section in the above image? That’s where the rule goes.  Here’s a sample snippet which shows the security rules to access the endpoint endpoint1 of service service1.  { \"rule\": \"allow\" } You can add write rules for each endpoint under each service. A request to an endpoint is denied if there is no corresponding rule for it. This ensures that all calls to remote services are secure by default.",
        "url": "https://docs.spaceuptech.com/microservices/graphql/securing-apis/"
    },
    {
        "index": "Microservices",
        "title": "GraphQL APIs",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Features",
        "description": "Using the security rules you can: Allow / deny access to a remote endpoint. Allow access to a remote endpoint only if the user is authenticated. Allow access to a remote endpoint only if certain conditions are met (via JSON rules or custom logic).",
        "url": "https://docs.spaceuptech.com/microservices/graphql/securing-apis/#features"
    },
    {
        "index": "Microservices",
        "title": "GraphQL APIs",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Popular use cases",
        "description": "Allow only signed in users to call a function (For example only allow signed in users to make a payment). Role based authentication (For example only allow admin to access a particular function) Check if the params sent by user contains a certain field. Call another function to authorize the function call (For example you might have an authorization service which validates all types of request). All these problems can be solved by the security module of Space Cloud.",
        "url": "https://docs.spaceuptech.com/microservices/graphql/securing-apis/#popular-use-cases"
    },
    {
        "index": "Microservices",
        "title": "GraphQL APIs",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Available variables",
        "description": "All requests for function calls contains 2 variables which are availabe to you for matching conditions: auth: The claims present in the JWT token. If you are using in-built user management service of Space Cloud, then the auth has id, name and role of the user. While making a custom service, you are free to choose the claims which go inside the JWT token and thus available in the auth variable. params: The params object sent by the user to call the function.",
        "url": "https://docs.spaceuptech.com/microservices/graphql/securing-apis/#available-variables"
    },
    {
        "index": "Microservices",
        "title": "GraphQL APIs",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Allow anonymous access",
        "description": "You can disable authentication and authorization for a particular function of a service completely by using allow. The request is allowed to be made even if the JWT token is absent in the request. You might want to use this when you want your users to perform certain operation without signin. Here’s how to give access to a particular operation using allow: { { \"rule\": \"allow\" } }",
        "url": "https://docs.spaceuptech.com/microservices/graphql/securing-apis/#allow-anonymous-access"
    },
    {
        "index": "Microservices",
        "title": "GraphQL APIs",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Deny access",
        "description": "This rule is to deny all calls to a particular function irrespective of any thing. It might be useful to temporarily deny access to a function (For example in testing). Here’s how to deny access to a particular function using deny: { { \"rule\": \"deny\" } }",
        "url": "https://docs.spaceuptech.com/microservices/graphql/securing-apis/#deny-access"
    },
    {
        "index": "Microservices",
        "title": "GraphQL APIs",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Allow only authenticated users",
        "description": "You can allow a certain function to be called only if the caller is authenticated. (For example, allow only logged in users to make a payment). This rule is used to allow the request only if a valid JWT token is found in the request. No checks are imposed beyond that. Basically it authorizes every request which has passed the authentication stage. Here’s how to allow a function call for authenticated users: { { \"rule\": \"authenticated\" } }",
        "url": "https://docs.spaceuptech.com/microservices/graphql/securing-apis/#allow-only-authenticated-users"
    },
    {
        "index": "Microservices",
        "title": "GraphQL APIs",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Allow function call on certain conditions",
        "description": "Many a times you might want a user to call a particular function only when certain conditions are met. Such conditions might require you to check the value of certain fields from the incoming request or from the database. Or it can be a custom validation altogether. The security rules in Space Cloud are made keeping this flexibility in mind.",
        "url": "https://docs.spaceuptech.com/microservices/graphql/securing-apis/#allow-function-call-on-certain-conditions"
    },
    {
        "index": "Microservices",
        "title": "GraphQL APIs",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Match incoming requests",
        "description": "This rule is used to allow a certain request only when a certain condition has been met and all the variables required for matching are present in the request itself. Every request for a function call contains 2 variables - auth and params present in the args object. Generally this rule is used to match the parameters sent by user with the auth object. It can also be used for role based authentication. The basic syntax looks like this: { \"rule\": \"match\", \"eval\": \"== | != | > | >= | < | <= | in | notIn\", \"type\": \"string | number | bool\", \"f1\": \"< field1 >\", \"f2\": \"< field2 >\" } Example (Match the value of a field in params sent by the user):  { \"rule\": \"match\", \"eval\": \"==\", \"type\": \"string\", \"f1\": \"args.auth.id\", \"f2\": \"args.params.userId\" } Example (Role based authentication - allow only admin to call a certain function): { \"rule\": \"match\", \"eval\": \"==\", \"type\": \"string\", \"f1\": \"args.auth.role\", \"f2\": \"admin\" } Example (Check if a field is present in the params):  { \"rule\": \"match\", \"eval\": \"==\", \"type\": \"bool\", \"f1\": \"utils.exists(args.params.postId)\", \"f2\": true } utils.exists is a utility function by the security rules which checks if a given field exists or not and returns true or false.",
        "url": "https://docs.spaceuptech.com/microservices/graphql/securing-apis/#match-incoming-requests"
    },
    {
        "index": "Microservices",
        "title": "GraphQL APIs",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Database Query",
        "description": "This rule is used to allow a certain function call only if a database request returns successfully. The query’s find clause is generated dynamically using this rule. The query is considered to be successful if even a single row is successfully returned. The basic syntax looks like this:  { \"rule\": \"query\", \"db\": \"mongo | sql-mysql | sql-postgres\", \"col\": \"< collection-name >\", \"find\": \"< mongo-find-query >\" } The query rule executes a database query with the user defined find object with operation type set to one. It is useful for policies which depend on the values stored in the database.  Example (Make sure a user can call a function only if he is author of some book):  { \"rule\": \"query\", \"db\": \"mongo\", \"col\": \"books\", \"find\": { \"authorId\": \"args.params.bookId\" } }",
        "url": "https://docs.spaceuptech.com/microservices/graphql/securing-apis/#database-query"
    },
    {
        "index": "Microservices",
        "title": "GraphQL APIs",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Combine multiple conditions",
        "description": "You can mix and match several match and query rules together to tackle complex authorization tasks (like the Instagram problem) using the and and or rule. The basic syntax looks like this:  { \"rule\": \"and | or\", \"clauses\": \"< array-of-rules >\"} Example (Make sure an user can call a function only if he has the role admin or super-user)  { \"rule\": \"or\", \"clauses\":  { \"rule\": \"match\", \"eval\": \"==\", \"type\": \"string\", \"f1\": \"args.auth.role\", \"f2\": \"admin\" }, { \"rule\": \"match\", \"eval\": \"==\", \"type\": \"string\", \"f1\": \"args.auth.role\", \"f2\": \"super-user\" } ] }",
        "url": "https://docs.spaceuptech.com/microservices/graphql/securing-apis/#combine-multiple-conditions"
    },
    {
        "index": "Microservices",
        "title": "GraphQL APIs",
        "sub_title": "Securing your APIs",
        "page": "Securing your APIs",
        "heading": "Custom validations",
        "description": "In case where the matching and db query for validating conditions are not enough, Space Cloud can use your custom authorization logic by triggering a webhook on your servers. Here’s an example showing how to do this by rule webhook: { \"rule\": \"webhook\", \"url\": \"http://localhost:8080/my-custom-logic\" } In the above case, Space Cloud will make a POST request to your remote server on the above url. If the remote server returns a status of 2XX, the request will be considered authenticated. Otherwise, Space Cloud will consider the request as unauthorized. The webhook body will consist of the same variables that were available under the args key in security rules.  End to end user authentication  As the name suggests, we authenticate the end user in this form of authentication. This is essential if you need to verify or restrict requests from authorized users only.  Space Cloud transparently forwards the token provided by the user in the Authorization header. This token is signed with the secret key provided in the project’s configuration.  Service to service authentication  In some cases, you would want to verify the sender of the request received by your service. This is required when your service is running in an open or untrusted network.  Space cloud adds a X-SC-Token header which contains a token containing the identity of the caller space cloud instance. This token can be used to check if the incoming request is coming from an authentic source. This token is signed with the secret key provided in the project’s configuration.",
        "url": "https://docs.spaceuptech.com/microservices/graphql/securing-apis/#custom-validations"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "Eventing",
        "page": "Eventing",
        "heading": "Eventing",
        "description": "Space Cloud can be used to create event triggers on database, file storage or custom events. The in-built eventing system in Space Cloud reliably invokes webhooks to carry out any custom logic.",
        "url": "https://docs.spaceuptech.com/microservices/eventing/"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "Eventing",
        "page": "Eventing",
        "heading": "Why use event triggers?",
        "description": "Event triggers enable: Improved performance: Due to the async nature, event creators don’t have to wait. Better reliability: Configurable retry logic. Simplified decoupling: Change business logic without changing event data. Scheduling events: Reschedule the event for some time in the future for flexible processing.",
        "url": "https://docs.spaceuptech.com/microservices/eventing/"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "Eventing",
        "page": "Eventing",
        "heading": "Use cases",
        "description": "Event triggers are excellent for carrying out asynchronous business logic. Following are a few use cases of event triggers: Updating search index (e.g., Elasticsearch or Algolia) or a caching system on CRUD operations in your primary database. Performing mutations on any event. Sending out a welcome email on new signup.",
        "url": "https://docs.spaceuptech.com/microservices/eventing/"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "Eventing",
        "page": "Eventing",
        "heading": "How it works",
        "description": "You add an event trigger to Space Cloud via Mission Control. Each event trigger has type, webhook and other configurable parameters. Events can be of the following types:  CRUD_CREATE: When a row/document gets created. CRUD_UPDATE: When a row/document gets updated. CRUD_DELETE: When a row/document gets deleted. FILE_CREATE: When a file/folder is created. FILE_DELETE: When a file/folder is deleted. <CUSTOM>: Whenever you queue a custom event to Space Cloud. Whenever an event takes place (e.g., insert mutation via Space Cloud or a custom event), Space Cloud invokes the webhook with the event payload. If the webhook responds with a 2xx status code, Space Cloud marks the event to be processed. Otherwise, it retries the webhook, a certain number of times (configurable) before finally marking it as failed.  Space Cloud stores the events log in event_logs table in the eventing database (both of them are configurable). The primary database that you selected while creating a project is selected as the eventing database by default.",
        "url": "https://docs.spaceuptech.com/microservices/eventing/"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "Eventing",
        "page": "Eventing",
        "heading": "Service to service authentication",
        "description": "In some cases, you would want to verify the sender of the request received by your service. This is required when your service is running in an open or untrusted network. Space cloud adds a X-SC-Token header which contains a token containing the identity of the caller space cloud instance. This token can be used to check if the incoming request is coming from an authentic source. This token is signed with the secret key provided in the project’s configuration.",
        "url": "https://docs.spaceuptech.com/microservices/eventing/"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "Database events",
        "page": "Database events",
        "heading": "Database events",
        "description": "You can trigger webhooks on any mutations performed on your database via Space Cloud.",
        "url": "https://docs.spaceuptech.com/microservices/eventing/database/"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "Database events",
        "page": "Database events",
        "heading": "Create database event trigger",
        "description": "Open a project in Mission Control, head to the Event Triggers section and click on the Add button to open the form below: Database event trigger",
        "url": "https://docs.spaceuptech.com/microservices/eventing/database/#create-database-event-trigger"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "Database events",
        "page": "Database events",
        "heading": "Parameters",
        "description": "Trigger Name Give a unique name for an event trigger. (e.g., welcome-email )  Source  Select Database as the event source.  Database  Select the database for which you want to create an event trigger.  Collection/Table Name  Put the table/collection name for which you want to create an event trigger. It is an optional field. If you leave this field empty, the event trigger gets configured for all tables/collections in the selected database.  Trigger operation  Select the CRUD operation for which you want to create the event trigger. Can be one of:  Insert: When a row/document gets created. Update: When a row/document gets updated. Delete: When a row/document gets deleted. Webhook URL  The HTTP(s) URL that should get triggered with the event payload on the configured operation. Must be a POST handler.",
        "url": "https://docs.spaceuptech.com/microservices/eventing/database/#parameters"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "Database events",
        "page": "Database events",
        "heading": "Advanced settings",
        "description": "Retries The number of times to retry a failed invocation. Default value is 3.  Timeout  Timeout in milliseconds. Default value is 5000.",
        "url": "https://docs.spaceuptech.com/microservices/eventing/database/#advanced-settings"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "Database events",
        "page": "Database events",
        "heading": "Delivery mechanism",
        "description": "The webhook is delivered over HTTP POST request to the specified webhook URL with the following headers: Content-Type: application/json",
        "url": "https://docs.spaceuptech.com/microservices/eventing/database/#delivery-mechanism"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "Database events",
        "page": "Database events",
        "heading": "Event payload",
        "description": "The POST body of the webhook is a JSON object which follows the Cloud Events specs: { \"specversion\": \"1.0-rc1\", \"id\": \"<unique-uuid>\", \"type\": \"<event-type>\", \"source\": \"<space-cloud-node-id>\", \"time\": \"<date-string>\", \"data\": { \"db\": \"<db-type>\", \"col\": \"<col-name>\", \"docId\": \"<document-id>\" , \"doc\": \"Object\" } } Key Type Description specversion String Version of the Cloud Events specifications. id String A unique identifier of an event. type String Event type. One of DB_INSERT, DB_UPDATE or DB_DELETE . source String Unique identifier of a Space Cloud instance. time String Time at which the event occurred(ISO 8601 format). data.db String Database type. One of mongodb, sql-postgres or sql-mysql . data.col String Collection/table on which the event occurred. data.docId String Unique identifier of a row/document (id field in SQL databases and _id field in MongoDB). data.doc Object The document being inserted or updated. Latest document in case of update operation. For example: { \"specversion\" : \"1.0-rc1\", \"id\": \"43e32d79-f2bf-41c0-be5f-a75c8c1bcfbf\", \"type\": \"DB_INSERT\", \"source\": \"1fb07d5d-b670-468e-ba94-ad5f06a5c053\", \"time\": \"2019-10-19T12:40:50.053Z\", \"data\": { \"db\": \"mongodb\", \"col\": \"authors\", \"docId\": \"ff4a2ee9-830d-487f-8871-8c8b5a61b0bd\" , \"doc\": { \"_id\": \"ff4a2ee9-830d-487f-8871-8c8b5a61b0bd\", \"title\": \"Getting started with event triggers\", \"is_published\": false, \"created_at\": \"2019-10-19T12:40:50.053Z\" } } }",
        "url": "https://docs.spaceuptech.com/microservices/eventing/database/#event-payload"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "Database events",
        "page": "Database events",
        "heading": "Webhook response structure",
        "description": "You can trigger webhooks on any mutations performed on your database via Space Cloud.",
        "url": "A 2xx response status code from the webhook target is deemed to be a successful invocation of the webhook. Any other response status results in an unsuccessful invocation that causes retries as per the retry configuration."
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "File Storage events",
        "page": "File Storage events",
        "heading": "File Storage events",
        "description": "You can trigger webhooks on any file storage operations (create/delete) performed via Space Cloud.",
        "url": "https://docs.spaceuptech.com/microservices/eventing/file-storage/"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "File Storage events",
        "page": "File Storage events",
        "heading": "Create file storage event trigger",
        "description": "Open a project in Mission Control, head to the Event Triggers section and click on the Add button to open the form below:",
        "url": "https://docs.spaceuptech.com/microservices/eventing/file-storage/#create-file-storage-event-trigger"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "File Storage events",
        "page": "File Storage events",
        "heading": "Parameters",
        "description": "Trigger Name Give a unique name for an event trigger. (e.g., upload-profile-pic )  Source  Select File Storage as the event source.  Trigger operation  Select the file storage operation for which you want to create the event trigger. Can be one of:  Write: When a file/folder gets written/created. Delete: When a file/folder gets deleted. Webhook URL  The HTTP(s) URL that should get triggered with the event payload on the configured operation. Must be a POST handler.",
        "url": "https://docs.spaceuptech.com/microservices/eventing/file-storage/#parameters"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "File Storage events",
        "page": "File Storage events",
        "heading": "Advanced settings",
        "description": "Retries The number of times to retry a failed invocation. Default value is 3.  Timeout  Timeout in milliseconds. Default value is 5000.",
        "url": "https://docs.spaceuptech.com/microservices/eventing/file-storage/#advanced-settings"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "File Storage events",
        "page": "File Storage events",
        "heading": "Delivery mechanism",
        "description": "The webhook is delivered over HTTP POST request to the specified webhook URL with the following headers: Content-Type: application/json",
        "url": "https://docs.spaceuptech.com/microservices/eventing/file-storage/#delivery-mechanism"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "File Storage events",
        "page": "File Storage events",
        "heading": "Event payload",
        "description": "The POST body of the webhook is a JSON object which follows the Cloud Events specs: { \"specversion\": \"1.0-rc1\", \"id\": \"<unique-uuid>\", \"type\": \"<event-type>\", \"source\": \"<space-cloud-node-id>\", \"time\": \"<date-string>\", \"data\": { \"path\": \"<file-path>\", \"meta\": \"Object\" } }  Key Type Description specversion String Version of the Cloud Events specifications. id String A unique identifier of an event. type String Event type. One of FILE_CREATE or FILE_DELETE . source String Unique identifier of a Space Cloud instance. time String Time at which the event occurred(ISO 8601 format). data.path String Path of the concerned file/folder. data.meta String meta object sent by the client while creating/deleting file. For example:  { \"specversion\" : \"1.0-rc1\", \"id\": \"43e32d79-f2bf-41c0-be5f-a75c8c1bcfbf\", \"type\": \"DB_INSERT\", \"source\": \"1fb07d5d-b670-468e-ba94-ad5f06a5c053\", \"time\": \"2019-10-19T12:40:50.053Z\", \"data\": { \"path\": \"/users/1/profile.jpg\", \"meta\": { \"file_size\": 100,  \"upload_date\": \"2019-10-19T12:40:50.053Z\"  } } } Note: The meta object is not generated by Space Cloud. It is an optional field sent by the client as a stringified JSON in the formdata at meta key while creating/deleting a file/folder.",
        "url": "https://docs.spaceuptech.com/microservices/eventing/file-storage/#event-payload"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "File Storage events",
        "page": "File Storage events",
        "heading": "Webhook response structure",
        "description": "A 2xx response status code from the webhook target is deemed to be a successful invocation of the webhook. Any other response status results in an unsuccessful invocation that causes retries as per the retry configuration.",
        "url": "https://docs.spaceuptech.com/microservices/eventing/file-storage/#webhook-response-structure"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "Custom events",
        "page": "Custom events",
        "heading": "Custom events",
        "description": "With Space Cloud, you can trigger webhooks on any custom events in your application. Space Cloud uses an in-built eventing queue to invoke your webhooks reliably.",
        "url": "https://docs.spaceuptech.com/microservices/eventing/custom-events/"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "Custom events",
        "page": "Custom events",
        "heading": "Create custom event trigger",
        "description": "Open a project in Mission Control, head to the Event Triggers section and click on the Add button to open the form below:",
        "url": "https://docs.spaceuptech.com/microservices/eventing/custom-events/#create-custom-event-trigger"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "Custom events",
        "page": "Custom events",
        "heading": "Parameters",
        "description": "Trigger Name Give a unique name for an event trigger. (e.g., welcome-email )  Source  Select Custom as the event source.  Type  The type of event for which you want to create a trigger. (eg: sent-email)  Webhook URL  The HTTP(s) URL that should get triggered with the event payload on the configured operation. Must be a POST handler.",
        "url": "https://docs.spaceuptech.com/microservices/eventing/custom-events/#parameters"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "Custom events",
        "page": "Custom events",
        "heading": "Advanced settings",
        "description": "Retries The number of times to retry a failed invocation. Default value is 3.  Timeout  Timeout in milliseconds. Default value is 5000.",
        "url": "https://docs.spaceuptech.com/microservices/eventing/custom-events/#advanced-settings"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "Custom events",
        "page": "Custom events",
        "heading": "Triggering events",
        "description": "You can trigger your custom event either via Mission Control or programmatically via the HTTP API of Space Cloud. You can also schedule an event for the future.",
        "url": "https://docs.spaceuptech.com/microservices/eventing/custom-events/#triggering-events"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "Custom events",
        "page": "Custom events",
        "heading": "HTTP API",
        "description": "To deliver/queue an event to Space Cloud, make an HTTP POST request to Space Cloud: Endpoint:  http://<space-cloud-url>/v1/api/<project-id>/event-triggers/queue JSON payload:  { \"type\": \"<event-type>\", \"delay\": \"Number\", \"timestamp\": \"Number\", \"data\": \"Object\" } Key Type Required Default value Description type String yes Type of event. timestamp Number no Used to schedule event trigger at the given timestamp (in milliseconds) schedule time for event trigger. delay Number no 0 Number of seconds to delay the trigger from timestamp. data Object no null Event data. For example,  { \"type\": \"sent-email\", \"data\": { \"to\": \"user1@email.com\", \"from\": \"user2@email.com\", \"subject\": \"Some Subject\" } }",
        "url": "https://docs.spaceuptech.com/microservices/eventing/custom-events/#http-api"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "Custom events",
        "page": "Custom events",
        "heading": "Scheduling events",
        "description": "You can schedule events to be triggered later by using timestamp and/or delay fields: Example: Delay event trigger by 1 minute:  { \"type\": \"my-custom-event\", \"delay\": 3600, \"data\": { \"foo\": \"bar\" } } Example: Schedule event trigger for a particular time:  { \"type\": \"my-custom-event\", \"timestamp\": 1587902400, \"data\": { \"foo\": \"bar\" } } Example: Delay event trigger by 1 minute from a particular time:  { \"type\": \"my-custom-event\", \"delay\": 3600, \"timestamp\": 1587902400, \"data\": { \"foo\": \"bar\" } }",
        "url": "https://docs.spaceuptech.com/microservices/eventing/custom-events/#scheduling-events"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "Custom events",
        "page": "Custom events",
        "heading": "Invoking events from Mission Control",
        "description": "Custom event triggers can be invoked via the Mission Control as well. Head to the Event Triggers section and click the Trigger button for any event trigger in the Actions column to open the following form:  Trigger event screen  Put the event data and hit Trigger.  ",
        "url": "https://docs.spaceuptech.com/microservices/eventing/custom-events/#invoking-events-from-mission-control"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "Custom events",
        "page": "Custom events",
        "heading": "Delivery mechanism",
        "description": "The webhook is delivered over HTTP POST request to the specified webhook URL with the following headers: Content-Type: application/json",
        "url": "https://docs.spaceuptech.com/microservices/eventing/custom-events/#delivery-mechanism"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "Custom events",
        "page": "Custom events",
        "heading": "Event payload",
        "description": "The POST body of the webhook is a JSON object which follows the Cloud Events specs: { \"specversion\": \"1.0-rc1\", \"id\": \"<unique-uuid>\", \"type\": \"<event-type>\", \"source\": \"<space-cloud-node-id>\", \"time\": \"<date-string>\", \"data\": \"Object\" }  Key Type Description specversion String Version of the Cloud Events specifications. id String A unique identifier of an event. type String Event type. One of DB_INSERT , DB_UPDATE or DB_DELETE . source String Unique identifier of a Space Cloud instance. time String Time at which the event occurred(ISO 8601 format). data Object Event data sent by the client. For example,  { \"specversion\": \"1.0-rc1\", \"id\": \"43e32d79-f2bf-41c0-be5f-a75c8c1bcfbf\", \"type\": \"my-custom-event\", \"source\": \"1fb07d5d-b670-468e-ba94-ad5f06a5c053\", \"time\": \"2019-10-19T12:40:50.053Z\", \"data\": { \"foo\": \"bar\" } }",
        "url": "https://docs.spaceuptech.com/microservices/eventing/custom-events/#event-payload"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "Custom events",
        "page": "Custom events",
        "heading": "Webhook response structure",
        "description": "A 2xx response status code from the webhook target is deemed to be a successful invocation of the webhook. Any other response status results in an unsuccessful invocation that causes retries as per the retry configuration.",
        "url": "https://docs.spaceuptech.com/microservices/eventing/custom-events/#webhook-response-structure"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "Remove event logs",
        "page": "Remove event logs",
        "heading": "Remove event logs",
        "description": "Space Cloud stores the event logs related to Event Triggers in the event_logs table/collection. If there are lots of events, the event_logs table can get huge, and you may want to prune them. You can use any of the following options to prune your event logs depending on your need. Note: You can even change the table and database where Space Cloud stores its event logs from the Configure section.",
        "url": "https://docs.spaceuptech.com/microservices/eventing/remove-event-logs/"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "Remove event logs",
        "page": "Remove event logs",
        "heading": "Table structure",
        "description": "The event_logs table managed by Space Cloud has the following structure:  Field Type Description _id String Unique identifier of an event. batchid Number Unique identifier of a batch of an event. Used for internal Space Cloud events. type Number Event type token String Authorization token timestamp Number Timestamp of when the event should get executed. event_timestamp Number Timestamp of when the event was queued. payload String Event data stringified. status String Status of event - staged, processed or failed. retries Number Number of retries performed. url String Webhook URL. remark String Reason of failure.",
        "url": "https://docs.spaceuptech.com/microservices/eventing/remove-event-logs/#table-structure"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "Remove event logs",
        "page": "Remove event logs",
        "heading": "Option 1: Clear only failed events",
        "description": "DELETE from event_logs where status = \"failed\";",
        "url": "https://docs.spaceuptech.com/microservices/eventing/remove-event-logs/#option-1-clear-only-failed-events"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "Remove event logs",
        "page": "Remove event logs",
        "heading": "Option 2: Clear only processed events",
        "description": "DELETE from event_logs where status = \"processed\";",
        "url": "https://docs.spaceuptech.com/microservices/eventing/remove-event-logs/#option-2-clear-only-processed-events"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "Remove event logs",
        "page": "Remove event logs",
        "heading": "Option 3: Clear both failed and processed events",
        "description": "DELETE from event_logs where status = \"failed\" or status = \"processed\";",
        "url": "https://docs.spaceuptech.com/microservices/eventing/remove-event-logs/#option-3-clear-both-failed-and-processed-events"
    },
    {
        "index": "Microservices",
        "title": "Eventing",
        "sub_title": "Remove event logs",
        "page": "Remove event logs",
        "heading": "Option 4: Clear only failed events",
        "description": "DELETE from event_logs;",
        "url": "https://docs.spaceuptech.com/microservices/eventing/remove-event-logs/#option-4-clear-only-failed-events"
    },
    {
        "index": "Microservices",
        "title": "Deployments",
        "sub_title": "Deployments",
        "page": "Deployments",
        "heading": "Deployments",
        "description": "The Deployments Module automatically deploys and scales your microservices on any Kubernetes cluster. It has first-class support of Istio; hence all your services enjoy the benefit of using a Service Mesh. All you need to do it provide a docker image and that’s it. Follow the Space Cloud Basic guide for step-by-step instructions to get started with the Deployments Module!  In a nutshell, the deployments module lets you:  Deploy docker images to Kubernetes / Docker Fully encrypt all internal traffic by default for enhanced security. PKI authentication for all services to prevent rogue services from accessing internal APIs. AutoScale HTTP workloads even down to zero! Define service to service communication policy for easy compliance with regulations. Ability to manage your microservice lifecycle for easy adoption of DevOps best practices like GitOps. Space Cloud can also deploy docker images on a single node using the docker driver. However, this comes with a few limitations, which includes:  No autoscaling No benefits of a service mesh ",
        "url": "https://docs.spaceuptech.com/microservices/deployments/"
    },
    {
        "index": "Microservices",
        "title": "Deployments",
        "sub_title": "Deploy your first service",
        "page": "Deploy your first service",
        "heading": "Deploy your first service",
        "description": "Space Cloud lets you leverage all the capabilities of Kubernetes without having to learn the Kubernetes API. Follow the Space Cloud Basic guide for step-by-step instructions to get started with the Deployments Module!",
        "url": "https://docs.spaceuptech.com/microservices/deployments/deploy-your-first-service/"
    },
    {
        "index": "Microservices",
        "title": "Deployments",
        "sub_title": "Deploy your first service",
        "page": "Deploy your first service",
        "heading": "Deployments Module",
        "description": "In mission control, the Deployments section in the Microservices navigation contains the UI to play around with the module. It looks something like this: Deployments overview  Hitting the Deploying your first container button opens up a form to create a new Service.  Deployment add service form  The configuration entered in the above image is as follows: myapp spaceuptech/basic-service 8080 with the protocol set to HTTP",
        "url": "https://docs.spaceuptech.com/microservices/deployments/deploy-your-first-service/#deployments-module"
    },
    {
        "index": "Microservices",
        "title": "Deployments",
        "sub_title": "Deploy your first service",
        "page": "Deploy your first service",
        "heading": "What does this do?",
        "description": "We just created a service named myapp and instructed Space Cloud to pull the spaceuptech/basic-service docker image from Docker Hub. We also specified that our myapp service listens on port 8080. We haven’t changed any of the advanced configurations in this example. Feel free to explore those as well.  Space Cloud now pulls the docker image and starts it with the default configs. It also creates an internal domain myapp.myproject.svc.cluster.local to access our service from within the cluster.  Domains are created in the format <service-id>.<project-id>.svc.cluster.local.  Under the hood Space Cloud also configures Istio and setups up mtls, authentication policies and more to secure your deployments by default.",
        "url": "https://docs.spaceuptech.com/microservices/deployments/deploy-your-first-service/#what-does-this-do"
    },
    {
        "index": "Microservices",
        "title": "Deployments",
        "sub_title": "Deploy your first service",
        "page": "Deploy your first service",
        "heading": "Next steps",
        "description": "Explore the service configuration in more detail.",
        "url": "https://docs.spaceuptech.com/microservices/deployments/deploy-your-first-service/#next-steps"
    },
    {
        "index": "Microservices",
        "title": "Deployments",
        "sub_title": "Exposing a service",
        "page": "Exposing a service",
        "heading": "Exposing a service",
        "description": "All services deployed by Space Cloud can be accessed only from within the cluster. Its as if, they do not exist to the outside world. Sometimes you might want to expose certain services or endpoints to the external world. This is especially true when you are hosting your frontend from within Space Cloud. To do this, we need to set up some rules in the Routing Section.  The recommended way to expose your endpoints is by using the GraphQL API for enhanced security and flexibility",
        "url": "https://docs.spaceuptech.com/microservices/deployments/exposing-a-service/"
    },
    {
        "index": "Microservices",
        "title": "Deployments",
        "sub_title": "Exposing a service",
        "page": "Exposing a service",
        "heading": "How it works?",
        "description": "Each routing rule needs to point towards a target service. The target is the service you have deployed using Space Cloud. Routing rules can be applied based on the HOST and URL of the incoming request. You can use either or a combination of both to set up your routing rules.",
        "url": "https://docs.spaceuptech.com/microservices/deployments/exposing-a-service/#how-it-works"
    },
    {
        "index": "Microservices",
        "title": "Deployments",
        "sub_title": "Exposing a service",
        "page": "Exposing a service",
        "heading": "Routing based on the requests host field",
        "description": "By default, each security rule matches requests irrespective of their host field. To match requests from specific hosts only, check the Allow traffic from specified hosts only option. This allows you to insert an array of hosts you want the rule to match. The rule matches if any one of the hostname match.  You can use the * keyword to match requests irrespective of the host field.",
        "url": "https://docs.spaceuptech.com/microservices/deployments/exposing-a-service/#routing-based-on-the-requests-host-field"
    },
    {
        "index": "Microservices",
        "title": "Deployments",
        "sub_title": "Exposing a service",
        "page": "Exposing a service",
        "heading": "Routing based on the requests URL",
        "description": "Url based matching consists of 3 parts - match type, URL / prefix and rewrite URL. The match type option configures the URL matching scheme used. There can be two possible values:  Prefix match: This uses the specified URL to match with the prefix of the requests URL. Exact match: This checks if the specified URL matches the requests URL exactly. Finally, rewrite is used to overwrite the prefix of the URL when enabled.",
        "url": "https://docs.spaceuptech.com/microservices/deployments/exposing-a-service/#routing-based-on-the-requests-url"
    },
    {
        "index": "Microservices",
        "title": "Deployments",
        "sub_title": "Exposing a service",
        "page": "Exposing a service",
        "heading": "Exposing a serviceTaking an example",
        "description": "Route Matching Type Prefix Rewrite Target Host Target Port Prefix Match /v1/foo /foo myapp.myproject.svc.cluster.local 8080 An incoming request with the URL /v1/foo/bar would result in Space Cloud making a request http://myapp.myproject.svc.cluster.local:8080/foo/bar.",
        "url": "https://docs.spaceuptech.com/microservices/deployments/exposing-a-service/#taking-an-example"
    },
    {
        "index": "Microservices",
        "title": "Deployments",
        "sub_title": "Exposing a service",
        "page": "Exposing a service",
        "heading": "Limitations",
        "description": "The routing module only works for incoming HTTP requests. Websockets are not currently supported. Space Cloud always fires an HTTP request even if the incoming request was HTTPS. Routing rules can be applied based on the HOST and URL of the incoming request only.",
        "url": "https://docs.spaceuptech.com/microservices/deployments/exposing-a-service/#limitations"
    },
    {
        "index": "Microservices",
        "title": "Deployments",
        "sub_title": "Services in depth",
        "page": "Services in depth",
        "heading": "Services in depth",
        "description": "At the core of the Deployments Module is the Service Configuration commonly called services. You can think of services as an equivalent of Pods in Kubernetes.  Space Cloud only supports running stateless services as of now.  Each service describes the following:",
        "url": "https://docs.spaceuptech.com/microservices/deployments/services-in-depth/"
    },
    {
        "index": "Microservices",
        "title": "Deployments",
        "sub_title": "Services in depth",
        "page": "Services in depth",
        "heading": "Service Id",
        "description": "Each service requires an id. These ids need to be unique inside a project. Services can be accessed internally using the domain name Space Cloud generates from this service id. The format for the domains goes as: <service-id>.<project-id>.svc.cluster.local.  For example, if you create a service by the id myapp inside the project myproject, the domain generated would read as myapp.myproject.svc.cluster.local.  Note: This is true for the docker driver as well.",
        "url": "https://docs.spaceuptech.com/microservices/deployments/services-in-depth/"
    },
    {
        "index": "Microservices",
        "title": "Deployments",
        "sub_title": "Services in depth",
        "page": "Services in depth",
        "heading": "Tasks",
        "description": "A service is composed of one or more tasks. You can see each task as an equivalent of Containers in each Pod. Currently, Mission Control lets you create a single task in each service. For creating multiple tasks per service, use the space-cli.  There are several cases when you would need to club several tasks together into one service.  A logging task which collects and delivers all service logs A proxy task to intercept network traffic as in case of a service mesh A config management tasks which hot reloads the configuration of other tasks (like Nginx). Space Cloud automatically injects an istio-proxy and metrics-proxy when using the Kubernetes driver.  You specify the following for each task.  The ports exposed by the task (e.g. 8080). The docker image and the registry credentials (if private). The resources (CPU and Ram) to be allocated to this task. The scaling configuration (e.g. max and min scale and concurrency). The secrets and environment variables used by the task. ",
        "url": "https://docs.spaceuptech.com/microservices/deployments/services-in-depth/"
    },
    {
        "index": "Microservices",
        "title": "Deployments",
        "sub_title": "Services in depth",
        "page": "Services in depth",
        "heading": "Upstreams",
        "description": "Space Cloud makes you explicitly define the upstream services your service depends on. All upstream services in the project are accessible by default.",
        "url": "https://docs.spaceuptech.com/microservices/deployments/services-in-depth/"
    },
    {
        "index": "Microservices",
        "title": "Deployments",
        "sub_title": "Services in depth",
        "page": "Services in depth",
        "heading": "Whitelists",
        "description": "Whitelists are a way to describe service to service communication policies. As the name implies, it restricts downstream services from accessing the current service.",
        "url": "https://docs.spaceuptech.com/microservices/deployments/services-in-depth/"
    },
    {
        "index": "Microservices",
        "title": "Deployments",
        "sub_title": "Services in depth",
        "page": "Specifying a docker image",
        "heading": "Specifying a docker image",
        "description": "To use Space Cloud’s Deployments Module you need to specify a docker image to deploy. Currently, Space Cloud can only deploy containerized applications.",
        "url": "https://docs.spaceuptech.com/microservices/deployments/services-in-depth/specifying-a-docker-image/"
    },
    {
        "index": "Microservices",
        "title": "Deployments",
        "sub_title": "Services in depth",
        "page": "Specifying a docker image",
        "heading": "Specify an image from Docker Hub",
        "description": "In the add service form, you’ll see the following config. Docker image public  All you need to do is supply the docker image name, and that’s it. For eg. spaceuptech/basic-service.  Space Cloud searches for the image on Docker Hub by default.",
        "url": "https://docs.spaceuptech.com/microservices/deployments/services-in-depth/specifying-a-docker-image/#specify-an-image-from-docker-hub"
    },
    {
        "index": "Microservices",
        "title": "Deployments",
        "sub_title": "Services in depth",
        "page": "Specifying a docker image",
        "heading": "Specify an image from another registry",
        "description": "In some cases, you may want to use a docker registry apart from Docker Hub. This is especially true when using the registry provided by a cloud vendor. In this case, you prefix the URL of the registry to the name of the docker image. Here are a few examples of spaceuptech/basic-service being on different registries.  Docker Hub: spaceuptech/basic-service Google Container Registry: gcr.io/spaceuptech/basic-service (more details) Amazon Container Registry: <aws_account_id>.dkr.ecr.<region>.amazonaws.com/basic-service (more details)",
        "url": "https://docs.spaceuptech.com/microservices/deployments/services-in-depth/specifying-a-docker-image/#specify-an-image-from-another-registry"
    },
    {
        "index": "Microservices",
        "title": "Deployments",
        "sub_title": "Services in depth",
        "page": "Specifying a docker image",
        "heading": "Specify a private image",
        "description": "You might want to create private images for the more sensitive applications. Space Cloud gives you the provision to pull private images as well. The first step is creating a docker secret from the Secrets section. You are required to provide the following:  Name: The name to use while referring to the secret. User Name: The username used to login into the registry. Password: The password used to login into the registry. Registry Url: The URL of the registry. Create Docker Secret  Once you have the secret ready, use it while creating/updating the service.  ",
        "url": "https://docs.spaceuptech.com/microservices/deployments/services-in-depth/specifying-a-docker-image/#specify-a-private-image"
    },
    {
        "index": "Microservices",
        "title": "Deployments",
        "sub_title": "Services in depth",
        "page": "Accessing your service",
        "heading": "Accessing your service",
        "description": "Space Cloud creates a unique domain name to access your service from inside the cluster. The domain created in this format: <service-id>.<project-id>.svc.cluster.local.  Let’s say you created a service with the id myapp inside the project myproject. In such a case the domain name created would be myapp.myproject.svc.cluster.local.  The format holds for Kubernetes and Docker environments.  These are domains names which can be accessed from inside the cluster only. To expose services to the external world, refer to the docs on routing.",
        "url": "https://docs.spaceuptech.com/microservices/deployments/services-in-depth/accessing-your-service/"
    },
    {
        "index": "Microservices",
        "title": "Deployments",
        "sub_title": "Services in depth",
        "page": "Restricting Resources",
        "heading": "Restricting Resources",
        "description": "Space Cloud provides a mechanism to restrict the resources each task can consume. These limits let you optimize your cluster resources. Service resources  The total amount of resources required to run the service would be the sum of the resource required by all tasks combined.",
        "url": "https://docs.spaceuptech.com/microservices/deployments/services-in-depth/restricting-resource/"
    },
    {
        "index": "Microservices",
        "title": "Deployments",
        "sub_title": "Services in depth",
        "page": "Restricting Resources",
        "heading": "Available Resource Types",
        "description": "Space Cloud provides a mechanism to restrict the resources each task can consume. These limiCurrently, you can restrict the following resources: CPU: Expressed as a fraction. (Eg. 0.5) Memory: Expressed in MBs. (Eg. 256) Space Cloud doesn’t yet support restricting disk space.",
        "url": "https://docs.spaceuptech.com/microservices/deployments/services-in-depth/restricting-resource/#available-resource-types"
    },
    {
        "index": "Microservices",
        "title": "Deployments",
        "sub_title": "Services in depth",
        "page": "Restricting Resources",
        "heading": "Default Resource Restrictions",
        "description": "Space Cloud always restricts resources by default. While these work for most use cases, you might want to tweak them as per your needs. Here are the default restrictions Space Cloud applies. CPU Memory 0.1 100 MBs",
        "url": "https://docs.spaceuptech.com/microservices/deployments/services-in-depth/restricting-resource/#default-resource-restrictions"
    },
    {
        "index": "Microservices",
        "title": "Deployments",
        "sub_title": "Services in depth",
        "page": "Restricting Resources",
        "heading": "How it Works?",
        "description": "In Kubernetes, the resource restrictions are implemented as Resource Requests. You can read more about it here.",
        "url": "https://docs.spaceuptech.com/microservices/deployments/services-in-depth/restricting-resource/#how-it-works"
    },
    {
        "index": "Microservices",
        "title": "Deployments",
        "sub_title": "Services in depth",
        "page": "Autoscaling",
        "heading": "Autoscaling",
        "description": "Space Cloud automatically scales your services to match on the load on the system. Each service is scaled independently of each other. Service Autoscaling Currently, Autoscaling works for HTTP based workloads only",
        "url": "https://docs.spaceuptech.com/microservices/deployments/services-in-depth/autoscaling/"
    },
    {
        "index": "Microservices",
        "title": "Deployments",
        "sub_title": "Services in depth",
        "page": "Autoscaling",
        "heading": "How it works",
        "description": "The following parameters are required for autoscaling to work. Min: The minimum number of instances for the service. This value can be zero. Max: The maximum number of instances for the service. Concurrency: The desired number of requests per second indented for this service Some points to remember:  Autoscaling works for each service independently. This feature makes sure that each service can scale independent of the other, keeping the system highly reactive. The number of instances gets calculated at a global level. Space Clouds sums up the number of requests per second for each instance of each service and uses that to decide the desired number of replicas. Scaling down to zero works for HTTP workloads only.",
        "url": "https://docs.spaceuptech.com/microservices/deployments/services-in-depth/autoscaling/#how-it-works"
    },
    {
        "index": "Microservices",
        "title": "Deployments",
        "sub_title": "Services in depth",
        "page": "Autoscaling",
        "heading": "Limitations",
        "description": "The autoscaling feature is under active development. Currently, it contains the following limitations: It only works for HTTP workloads. Workloads with a port described as TCP do not get autoscaled. For such cases, the min replica count is considered as the desired scale. Scaling can only happen, based on the number of requests per second.",
        "url": "https://docs.spaceuptech.com/microservices/deployments/services-in-depth/autoscaling/#limitations"
    },
    {
        "index": "Microservices",
        "title": "Deployments",
        "sub_title": "Services in depth",
        "page": "Using Secrets",
        "heading": "Using Secrets",
        "description": "Our services often need to use secrets. Things like database credentials and 3rd party API keys cannot be put inside a docker image right? Space Cloud provides the ability to describe such secrets and inject them in containers in runtime.",
        "url": "https://docs.spaceuptech.com/microservices/deployments/services-in-depth/using-secrets/"
    },
    {
        "index": "Microservices",
        "title": "Deployments",
        "sub_title": "Services in depth",
        "page": "Using Secrets",
        "heading": "Advantage of using Secrets",
        "description": "All secrets are made available to the containers at runtime. Changing secrets redeploys all services using it automatically. Makes the container images for flexible to use in different environments. You can create the secret once and use it in multiple services.",
        "url": "https://docs.spaceuptech.com/microservices/deployments/services-in-depth/using-secrets/#advantage-of-using-secrets"
    },
    {
        "index": "Microservices",
        "title": "Deployments",
        "sub_title": "Services in depth",
        "page": "Using Secrets",
        "heading": "How to works?",
        "description": "There are two types of secrets. Environment variables: This creates the provided environment variables in the services using it. File Secrets: This creates the provided files at a specific location in the services using it. Here’s how you create the two secrets:  Create env secret  Create file secret  To apply these secrets to a service, mention them in the service configuration.  ",
        "url": "https://docs.spaceuptech.com/microservices/deployments/services-in-depth/using-secrets/"
    },
    {
        "index": "Microservices",
        "title": "Deployments",
        "sub_title": "Services in depth",
        "page": "Whitelisting Services",
        "heading": "Whitelisting Services",
        "description": "Space Cloud allows you to whitelist the downstream services which are allowed to communicate with the current service in an effortless manner. Whitelisting Services  Space Cloud whitelists all services within the same project by default.",
        "url": "https://docs.spaceuptech.com/microservices/deployments/services-in-depth/whitelisting-services/"
    },
    {
        "index": "Microservices",
        "title": "Deployments",
        "sub_title": "Services in depth",
        "page": "Whitelisting Services",
        "heading": "How it works?",
        "description": "Whitelisting uses Istio’s Authorization Policies to enforce policy control. This helps you safeguard your sensitive services from internal attacks.Let’s say you have a Customer Identity Service which deals with personally identifiable information. By whitelisting the services which have access to this service, you can prevent customer data from leaking within the organization.  Space Cloud requires two parameters to configure whitelisting.  Project Id: The project id of the service to be whitelisted Service Id: The id of the service to be whitelisted Space Cloud allows you to whitelist services from different projects.  Whitelisting services from different projects works inside the same cluster only.  A * in the project id field indicates that the provided service can be accessible by all services in all projects. A * in the service id field indicates that the provided service can be accessible by all services in the provided project.",
        "url": "https://docs.spaceuptech.com/microservices/deployments/services-in-depth/whitelisting-services/#how-it-works"
    },
    {
        "index": "User Management",
        "title": "User Management",
        "sub_title": "User Management",
        "page": "User Management",
        "heading": "User Management",
        "description": "Space Cloud uses JWT (JSON Web Token) based authentication to identify the users of your app. You can use the in-built user management module of Space Cloud or any other auth services including your own.",
        "url": "https://docs.spaceuptech.com/user-management/"
    },
    {
        "index": "User Management",
        "title": "User Management",
        "sub_title": "User Management",
        "page": "User Management",
        "heading": "How it works",
        "description": "Space Cloud expects a JWT in every incoming request. The JWT should be present in the Authorization header of the request in the following format: Bearer <JWT-TOKEN>. Space Cloud verifies if the signature of the token is valid or not based on a secret provided to it, which can be configured via Mission Control. This makes sure that the user is authenticated and hasn’t tried to change or create his / her own false token. You can check out the official website of the JWT project to learn more about it.  If the signature of the token is verfied, Space Cloud considers the request to be authenticated and parses the claims present in JWT for access control.",
        "url": "https://docs.spaceuptech.com/user-management/"
    },
    {
        "index": "User Management",
        "title": "User Management",
        "sub_title": "User Management",
        "page": "User Management",
        "heading": "In-built user management module",
        "description": "Note: It is recommended to use your own user management module for a production environment. The current user management module is not production ready. User management is used for managing the various sign in methods which are generally used to develop applications. It’s basically a way for the user to sign up or login into your application. In addition to that it provides the user with a JWT token which is used in all the other modules for authentication and authorization.  The various sign in methods supported are:  Basic (email & password sign in) OAuth (Coming Soon)",
        "url": "https://docs.spaceuptech.com/user-management/"
    },
    {
        "index": "User Management",
        "title": "User Management",
        "sub_title": "User Management",
        "page": "User Management",
        "heading": "Configuration",
        "description": "Head over to the User Management section in the Mission Control. Enable the Basic Email authentication.  User management module expects the information of users in a users table/collection. Thus, we will need to create one.  Head to the Database section and create a table/collection with the following schema:  type users { id: ID! @id     ## _id for MongoDB email: String! name: String! pass: String role: String } Note: The password field is bcrypted by the user management module  Hit save button.  That’s all you need to configure for user management module.",
        "url": "https://docs.spaceuptech.com/user-management/"
    },
    {
        "index": "User Management",
        "title": "User Management",
        "sub_title": "User Management",
        "page": "User Management",
        "heading": "Usage",
        "description": "Once you have configured the user management module as mentioned above, you can start using it in your apps. On the frontend you can use one of our client SDKs to perform various operations in user management module:  Email sign in Email sign up Reading profiles",
        "url": "https://docs.spaceuptech.com/user-management/"
    },
    {
        "index": "User Management",
        "title": "Email Signin",
        "sub_title": "Email Signin",
        "page": "Email Signin",
        "heading": "Email Signin",
        "description": "You can easily allow users to log in to your app via email using the db.signIn function. This is how you could add a simple log in feature in your app. Make sure you have enabled the auth module. Here’s a code snippet to implement basic email sign in: import { API } from 'space-api';  // Initialize api with the project name and url of the space cloud const api = new API('todo_app', 'http://localhost:4122');  // Initialize database(s) you intend to use const db = api.Mongo();  // SignIn db.signIn('demo@example.com', '1234').then(res => { if (res.status === 200) { // Set the token id to enable operations of other modules api.setToken(res.data.token)  // res.data contains request payload console.log('Response:', res.data); return; } // Request failed }).catch(ex => { // Exception occured while processing request }); As you would have noticed, the above function is asynchronous in nature. The signIn method takes 2 parameters:  email - Email of the user. pass - Password of the user.",
        "url": "https://docs.spaceuptech.com/user-management/signin/"
    },
    {
        "index": "User Management",
        "title": "Email Signin",
        "sub_title": "Email Signin",
        "page": "Email Signin",
        "heading": "Response",
        "description": "On getting the log in request, Space Cloud validates whether such an user exists and sends a response accordingly. A response object sent by the server contains the status and data fields explained below. status: Number describing the http status code of the response. Following values are possible:  200 - Successful sign in 404 - No user with the given email 401 - The given credentials are not correct 500 - Internal server error data: The data object consists of the following fields:  token - The JWT token generated by the authentication module. The token contains the following claims - id (the unique id for the user), role and email user - Row / document corresponding to the signed in user",
        "url": "https://docs.spaceuptech.com/user-management/signin/"
    },
    {
        "index": "User Management",
        "title": "Email Signin",
        "sub_title": "Email Signin",
        "page": "Email Signin",
        "heading": "Next steps",
        "description": "The next step would be checking out the client reference to register a new user.",
        "url": "https://docs.spaceuptech.com/user-management/signin/"
    },
    {
        "index": "User Management",
        "title": "Email Signup",
        "sub_title": "Email Signup",
        "page": "Email Signup",
        "heading": "Email Signup",
        "description": "You can easily allow users to create a new user on your app via email using the db.signUp function. Here’s a code snippet to do a basic email sign up: import { API } from 'space-api';  // Initialize api with the project name and url of the space cloud const api = new API('todo_app', 'http://localhost:4122');  // Initialize database(s) you intend to use const db = api.Mongo();  // SignUp db.signUp('demo@example.com', 'User1', '1234', 'default').then(res => { if (res.status === 200) { // Set the token id to enable operations of other modules api.setToken(res.data.token)    // res.data contains request payload console.log('Response:', res.data); return; } // Request failed }).catch(ex => { // Exception occured while processing request }); As you would have noticed, the above function is asynchronous in nature. The signUp method takes 4 parameters and creates a new user with an auto generated unique id in the users collection / table. The 4 parameters used to create a new user are as follows:  email - Email of the user (Used to log in) name - Name of the user pass - Password of the user (Used to log in) role - Role of the user (Comes handy in authorization to restrict a feature to specific set of users)",
        "url": "https://docs.spaceuptech.com/user-management/signup/"
    },
    {
        "index": "User Management",
        "title": "Email Signup",
        "sub_title": "Email Signup",
        "page": "Email Signup",
        "heading": "Response",
        "description": "On getting the sign up request, space-cloud validates whether such an user exists already and then creates a new user. A response object sent by the server contains the status and data fields explained below. status: Number describing the status of the operation. Following values are possible:  200 - Operation was successful 400 - User already exists 401 - Request was unauthenticated 403 - Request was unauthorized 500 - Internal server error data: The data object consists of the following fields:  token - The JWT token used for authentication and authorization user - Object / document of the created user",
        "url": "https://docs.spaceuptech.com/user-management/signup/"
    },
    {
        "index": "User Management",
        "title": "Email Signup",
        "sub_title": "Email Signup",
        "page": "Email Signup",
        "heading": "Next steps",
        "description": "The next step would be fetching the profile of an user(s).",
        "url": "https://docs.spaceuptech.com/user-management/signup/"
    },
    {
        "index": "User Management",
        "title": "Reading Profiles",
        "sub_title": "Reading Profiles",
        "page": "Reading Profiles",
        "heading": "Reading Profiles",
        "description": "You can easily read the profiles of a single or multiple users in your app by simply calling the db.profile or db.profiles method on the frontend.",
        "url": "https://docs.spaceuptech.com/user-management/profiles/"
    },
    {
        "index": "User Management",
        "title": "Reading Profiles",
        "sub_title": "Reading Profiles",
        "page": "Reading Profiles",
        "heading": "Fetch profile of a single user",
        "description": "You can read the profile of a single user using db.profile function. It takes a single parameter - id (unique id of the user). import { API } from 'space-api';  // Initialize api with the project name and url of the space cloud const api = new API('todo_app', 'http://localhost:4122');  // Initialize database(s) you intend to use const db = api.Mongo();  // Read profile of an user const userId = 'some-user-id' db.profile(userId).then(res => { if (res.status === 200) { // res.data.user contains the profile of the user console.log('User profile', res.data.user) return; } }).catch(ex => { // Exception occured while processing request });",
        "url": "https://docs.spaceuptech.com/user-management/profiles/#fetch-profile-of-a-single-user"
    },
    {
        "index": "User Management",
        "title": "Reading Profiles",
        "sub_title": "Reading Profiles",
        "page": "Reading Profiles",
        "heading": "Fetch profiles of all users",
        "description": "You can read the profiles of all users with the help of profiles function as shown below: import { API } from 'space-api';    // Initialize api with the project name and url of the space cloud  const api = new API('todo_app', 'http://localhost:4122');    // Initialize database(s) you intend to use  const db = api.Mongo();    // Read profiles of all users  db.profiles().then(res => { if (res.status === 200) { // res.data.users contains the profile of the users console.log('Profiles', res.data.users) return; }  }).catch(ex => { // Exception occured while processing request  });",
        "url": "https://docs.spaceuptech.com/user-management/profiles/#fetch-profiles-of-all-users"
    },
    {
        "index": "User Management",
        "title": "Reading Profiles",
        "sub_title": "Reading Profiles",
        "page": "Reading Profiles",
        "heading": "Response",
        "description": "A response object sent by the server contains the status and data fields explained below: status: Number describing the status of the operation. Following values are possible:  200 - Operation was successful 401 - Request was unauthenticated 403 - Request was unauthorized 500 - Internal server error data: The data object consists of one of the following fields:  user (for profile) - User object users (for profiles) - Array of user objects",
        "url": "https://docs.spaceuptech.com/user-management/profiles/#response"
    }
]